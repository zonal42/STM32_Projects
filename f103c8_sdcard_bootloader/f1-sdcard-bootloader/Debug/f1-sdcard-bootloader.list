
f1-sdcard-bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007464  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b40  08007b40  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08007b40  08007b40  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b40  08007b40  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047b4  20000028  08007b6c  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200047dc  08007b6c  000247dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b95b  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000241d  00000000  00000000  0002b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  0002e8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001786b  00000000  00000000  0002f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b0fe  00000000  00000000  00046b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082672  00000000  00000000  00051c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d42a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c24  00000000  00000000  000d4320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08007558 	.word	0x08007558

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08007558 	.word	0x08007558

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <bootloaderInit>:
}



void bootloaderInit()
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
	uint32_t addr;
	UINT     num;

	Flashed_offset = 0;
 800092e:	4baa      	ldr	r3, [pc, #680]	; (8000bd8 <bootloaderInit+0x2b0>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
	uint32_t cntr;
	flashStatus = Unerased;
 8000934:	4ba9      	ldr	r3, [pc, #676]	; (8000bdc <bootloaderInit+0x2b4>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
	BootloaderMode bootloaderMode;
	if(HAL_GPIO_ReadPin(BOOT1_GPIO_Port, BOOT1_Pin) == GPIO_PIN_SET)
 800093a:	2108      	movs	r1, #8
 800093c:	48a8      	ldr	r0, [pc, #672]	; (8000be0 <bootloaderInit+0x2b8>)
 800093e:	f001 ff2d 	bl	800279c <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d16c      	bne.n	8000a22 <bootloaderInit+0xfa>
	{
		bootloaderMode = FlashMode;	
 8000948:	2301      	movs	r3, #1
 800094a:	71fb      	strb	r3, [r7, #7]


  
		 fr = f_mount(&fs, "", 0);
 800094c:	2200      	movs	r2, #0
 800094e:	49a5      	ldr	r1, [pc, #660]	; (8000be4 <bootloaderInit+0x2bc>)
 8000950:	48a5      	ldr	r0, [pc, #660]	; (8000be8 <bootloaderInit+0x2c0>)
 8000952:	f005 fd8d 	bl	8006470 <f_mount>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4ba4      	ldr	r3, [pc, #656]	; (8000bec <bootloaderInit+0x2c4>)
 800095c:	701a      	strb	r2, [r3, #0]
		 if(fr!=FR_OK) HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800095e:	4ba3      	ldr	r3, [pc, #652]	; (8000bec <bootloaderInit+0x2c4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <bootloaderInit+0x46>
 8000966:	2101      	movs	r1, #1
 8000968:	48a1      	ldr	r0, [pc, #644]	; (8000bf0 <bootloaderInit+0x2c8>)
 800096a:	f001 ff46 	bl	80027fa <HAL_GPIO_TogglePin>


		/*take free space and total space in sd card*/
		 if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 800096e:	4aa1      	ldr	r2, [pc, #644]	; (8000bf4 <bootloaderInit+0x2cc>)
 8000970:	49a1      	ldr	r1, [pc, #644]	; (8000bf8 <bootloaderInit+0x2d0>)
 8000972:	489c      	ldr	r0, [pc, #624]	; (8000be4 <bootloaderInit+0x2bc>)
 8000974:	f006 fc1f 	bl	80071b6 <f_getfree>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d006      	beq.n	800098c <bootloaderInit+0x64>
		{
			HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800097e:	2101      	movs	r1, #1
 8000980:	489b      	ldr	r0, [pc, #620]	; (8000bf0 <bootloaderInit+0x2c8>)
 8000982:	f001 ff3a 	bl	80027fa <HAL_GPIO_TogglePin>
			Error_Handler();
 8000986:	f001 f82f 	bl	80019e8 <Error_Handler>
 800098a:	e04c      	b.n	8000a26 <bootloaderInit+0xfe>
		}
		else
		{
	   /*taking total and free spaces to variables*/
	     total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800098c:	4b99      	ldr	r3, [pc, #612]	; (8000bf4 <bootloaderInit+0x2cc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000994:	3314      	adds	r3, #20
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	1e9a      	subs	r2, r3, #2
 800099a:	4b96      	ldr	r3, [pc, #600]	; (8000bf4 <bootloaderInit+0x2cc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009a2:	3302      	adds	r3, #2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	fb03 f302 	mul.w	r3, r3, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fd10 	bl	80003d0 <__aeabi_ui2d>
 80009b0:	f04f 0200 	mov.w	r2, #0
 80009b4:	4b91      	ldr	r3, [pc, #580]	; (8000bfc <bootloaderInit+0x2d4>)
 80009b6:	f7ff fd85 	bl	80004c4 <__aeabi_dmul>
 80009ba:	4603      	mov	r3, r0
 80009bc:	460c      	mov	r4, r1
 80009be:	4618      	mov	r0, r3
 80009c0:	4621      	mov	r1, r4
 80009c2:	f7ff ff91 	bl	80008e8 <__aeabi_d2uiz>
 80009c6:	4602      	mov	r2, r0
 80009c8:	4b8d      	ldr	r3, [pc, #564]	; (8000c00 <bootloaderInit+0x2d8>)
 80009ca:	601a      	str	r2, [r3, #0]
	     free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80009cc:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <bootloaderInit+0x2cc>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009d4:	3302      	adds	r3, #2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b87      	ldr	r3, [pc, #540]	; (8000bf8 <bootloaderInit+0x2d0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	fb03 f302 	mul.w	r3, r3, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fcf4 	bl	80003d0 <__aeabi_ui2d>
 80009e8:	f04f 0200 	mov.w	r2, #0
 80009ec:	4b83      	ldr	r3, [pc, #524]	; (8000bfc <bootloaderInit+0x2d4>)
 80009ee:	f7ff fd69 	bl	80004c4 <__aeabi_dmul>
 80009f2:	4603      	mov	r3, r0
 80009f4:	460c      	mov	r4, r1
 80009f6:	4618      	mov	r0, r3
 80009f8:	4621      	mov	r1, r4
 80009fa:	f7ff ff75 	bl	80008e8 <__aeabi_d2uiz>
 80009fe:	4602      	mov	r2, r0
 8000a00:	4b80      	ldr	r3, [pc, #512]	; (8000c04 <bootloaderInit+0x2dc>)
 8000a02:	601a      	str	r2, [r3, #0]
		 
		 HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000a04:	2102      	movs	r1, #2
 8000a06:	487a      	ldr	r0, [pc, #488]	; (8000bf0 <bootloaderInit+0x2c8>)
 8000a08:	f001 fef7 	bl	80027fa <HAL_GPIO_TogglePin>
		 HAL_Delay(10);
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f001 f97d 	bl	8001d0c <HAL_Delay>
		 HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000a12:	2102      	movs	r1, #2
 8000a14:	4876      	ldr	r0, [pc, #472]	; (8000bf0 <bootloaderInit+0x2c8>)
 8000a16:	f001 fef0 	bl	80027fa <HAL_GPIO_TogglePin>
		 HAL_Delay(90);
 8000a1a:	205a      	movs	r0, #90	; 0x5a
 8000a1c:	f001 f976 	bl	8001d0c <HAL_Delay>
 8000a20:	e001      	b.n	8000a26 <bootloaderInit+0xfe>

		
		
		
	}
	else bootloaderMode=JumpMode;
 8000a22:	2300      	movs	r3, #0
 8000a24:	71fb      	strb	r3, [r7, #7]

	if(bootloaderMode==JumpMode)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d124      	bne.n	8000a76 <bootloaderInit+0x14e>
	{
		uint8_t emptyCellCount = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	71bb      	strb	r3, [r7, #6]
		for(uint8_t i=0; i<10; i++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	717b      	strb	r3, [r7, #5]
 8000a34:	e012      	b.n	8000a5c <bootloaderInit+0x134>
			{
				if(readWord(APP1_START + (i*4)) == -1)
 8000a36:	797b      	ldrb	r3, [r7, #5]
 8000a38:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000a3c:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f940 	bl	8000cc8 <readWord>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4e:	d102      	bne.n	8000a56 <bootloaderInit+0x12e>
				emptyCellCount++;
 8000a50:	79bb      	ldrb	r3, [r7, #6]
 8000a52:	3301      	adds	r3, #1
 8000a54:	71bb      	strb	r3, [r7, #6]
		for(uint8_t i=0; i<10; i++)
 8000a56:	797b      	ldrb	r3, [r7, #5]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	717b      	strb	r3, [r7, #5]
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	2b09      	cmp	r3, #9
 8000a60:	d9e9      	bls.n	8000a36 <bootloaderInit+0x10e>
			}

		if(emptyCellCount != 10)
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	2b0a      	cmp	r3, #10
 8000a66:	d003      	beq.n	8000a70 <bootloaderInit+0x148>
		jumpToApp(APP1_START);
 8000a68:	4867      	ldr	r0, [pc, #412]	; (8000c08 <bootloaderInit+0x2e0>)
 8000a6a:	f000 f99d 	bl	8000da8 <jumpToApp>
			HAL_Delay(1000);
		}

	}
	
}
 8000a6e:	e0af      	b.n	8000bd0 <bootloaderInit+0x2a8>
		Error_Handler();
 8000a70:	f000 ffba 	bl	80019e8 <Error_Handler>
}
 8000a74:	e0ac      	b.n	8000bd0 <bootloaderInit+0x2a8>
	else if(bootloaderMode==FlashMode)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	f040 80a9 	bne.w	8000bd0 <bootloaderInit+0x2a8>
		if(f_open(&fil, CONF_FILENAME, FA_READ)!=FR_OK)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4962      	ldr	r1, [pc, #392]	; (8000c0c <bootloaderInit+0x2e4>)
 8000a82:	4863      	ldr	r0, [pc, #396]	; (8000c10 <bootloaderInit+0x2e8>)
 8000a84:	f005 fd3e 	bl	8006504 <f_open>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <bootloaderInit+0x16a>
			Error_Handler();
 8000a8e:	f000 ffab 	bl	80019e8 <Error_Handler>
		if(Bootloader_CheckSize(f_size(&fil)) != 1)
 8000a92:	4b5f      	ldr	r3, [pc, #380]	; (8000c10 <bootloaderInit+0x2e8>)
 8000a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a98:	330c      	adds	r3, #12
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f9cb 	bl	8000e38 <Bootloader_CheckSize>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d001      	beq.n	8000aac <bootloaderInit+0x184>
			Error_Handler();
 8000aa8:	f000 ff9e 	bl	80019e8 <Error_Handler>
		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000aac:	2102      	movs	r1, #2
 8000aae:	4850      	ldr	r0, [pc, #320]	; (8000bf0 <bootloaderInit+0x2c8>)
 8000ab0:	f001 fea3 	bl	80027fa <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000ab4:	2064      	movs	r0, #100	; 0x64
 8000ab6:	f001 f929 	bl	8001d0c <HAL_Delay>
		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000aba:	2102      	movs	r1, #2
 8000abc:	484c      	ldr	r0, [pc, #304]	; (8000bf0 <bootloaderInit+0x2c8>)
 8000abe:	f001 fe9c 	bl	80027fa <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f001 f922 	bl	8001d0c <HAL_Delay>
		unlockFlashAndEraseMemory();
 8000ac8:	f000 f90c 	bl	8000ce4 <unlockFlashAndEraseMemory>
		cntr = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Unlock();
 8000ad0:	f001 fa92 	bl	8001ff8 <HAL_FLASH_Unlock>
			f_read(&fil, &buffer, 4, &br);
 8000ad4:	4b4f      	ldr	r3, [pc, #316]	; (8000c14 <bootloaderInit+0x2ec>)
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	494f      	ldr	r1, [pc, #316]	; (8000c18 <bootloaderInit+0x2f0>)
 8000ada:	484d      	ldr	r0, [pc, #308]	; (8000c10 <bootloaderInit+0x2e8>)
 8000adc:	f006 f84c 	bl	8006b78 <f_read>
			if(num)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d022      	beq.n	8000b2c <bootloaderInit+0x204>
				if(flashWord(data)==1)
 8000ae6:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <bootloaderInit+0x2f4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f898 	bl	8000c20 <flashWord>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <bootloaderInit+0x1d6>
					cntr++;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	e004      	b.n	8000b08 <bootloaderInit+0x1e0>
					 f_close(&fil);
 8000afe:	4844      	ldr	r0, [pc, #272]	; (8000c10 <bootloaderInit+0x2e8>)
 8000b00:	f006 fb2e 	bl	8007160 <f_close>
					 Error_Handler();
 8000b04:	f000 ff70 	bl	80019e8 <Error_Handler>
				 if(cntr % 256 == 0)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d10d      	bne.n	8000b2c <bootloaderInit+0x204>
					 HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
 8000b10:	2102      	movs	r1, #2
 8000b12:	4837      	ldr	r0, [pc, #220]	; (8000bf0 <bootloaderInit+0x2c8>)
 8000b14:	f001 fe71 	bl	80027fa <HAL_GPIO_TogglePin>
					 HAL_Delay(100);
 8000b18:	2064      	movs	r0, #100	; 0x64
 8000b1a:	f001 f8f7 	bl	8001d0c <HAL_Delay>
					 HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4833      	ldr	r0, [pc, #204]	; (8000bf0 <bootloaderInit+0x2c8>)
 8000b22:	f001 fe6a 	bl	80027fa <HAL_GPIO_TogglePin>
					 HAL_Delay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f001 f8f0 	bl	8001d0c <HAL_Delay>
		} while((num!=0));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1d0      	bne.n	8000ad4 <bootloaderInit+0x1ac>
		lockFlash();
 8000b32:	f000 f917 	bl	8000d64 <lockFlash>
		f_close(&fil);
 8000b36:	4836      	ldr	r0, [pc, #216]	; (8000c10 <bootloaderInit+0x2e8>)
 8000b38:	f006 fb12 	bl	8007160 <f_close>
		addr=APP1_START;
 8000b3c:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <bootloaderInit+0x2e0>)
 8000b3e:	60fb      	str	r3, [r7, #12]
		cntr=0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
		data = 0xFFFFFFFF;
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <bootloaderInit+0x2f4>)
 8000b46:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4a:	601a      	str	r2, [r3, #0]
		fr = f_read(&fil, data, 4, &num);
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <bootloaderInit+0x2f4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	463b      	mov	r3, r7
 8000b54:	2204      	movs	r2, #4
 8000b56:	482e      	ldr	r0, [pc, #184]	; (8000c10 <bootloaderInit+0x2e8>)
 8000b58:	f006 f80e 	bl	8006b78 <f_read>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <bootloaderInit+0x2c4>)
 8000b62:	701a      	strb	r2, [r3, #0]
		if(num)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00e      	beq.n	8000b88 <bootloaderInit+0x260>
			 if(*(uint32_t*)addr == (uint32_t)data)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <bootloaderInit+0x2f4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d106      	bne.n	8000b84 <bootloaderInit+0x25c>
                addr += 4;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	60fb      	str	r3, [r7, #12]
                cntr++;
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	e001      	b.n	8000b88 <bootloaderInit+0x260>
				Error_Handler();
 8000b84:	f000 ff30 	bl	80019e8 <Error_Handler>
		}while((fr == FR_OK) && (num > 0));
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <bootloaderInit+0x2c4>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <bootloaderInit+0x26e>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1d6      	bne.n	8000b44 <bootloaderInit+0x21c>
		fr=f_mount(NULL,"",1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	4912      	ldr	r1, [pc, #72]	; (8000be4 <bootloaderInit+0x2bc>)
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f005 fc68 	bl	8006470 <f_mount>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <bootloaderInit+0x2c4>)
 8000ba6:	701a      	strb	r2, [r3, #0]
		if(fr==FR_OK)
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <bootloaderInit+0x2c4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10f      	bne.n	8000bd0 <bootloaderInit+0x2a8>
			HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin|LED_G_Pin);
 8000bb0:	2106      	movs	r1, #6
 8000bb2:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <bootloaderInit+0x2c8>)
 8000bb4:	f001 fe21 	bl	80027fa <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bbc:	f001 f8a6 	bl	8001d0c <HAL_Delay>
			HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin|LED_G_Pin);
 8000bc0:	2106      	movs	r1, #6
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <bootloaderInit+0x2c8>)
 8000bc4:	f001 fe19 	bl	80027fa <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bcc:	f001 f89e 	bl	8001d0c <HAL_Delay>
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	200012b0 	.word	0x200012b0
 8000bdc:	20000278 	.word	0x20000278
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	08007570 	.word	0x08007570
 8000be8:	2000027c 	.word	0x2000027c
 8000bec:	200016bc 	.word	0x200016bc
 8000bf0:	40010800 	.word	0x40010800
 8000bf4:	200016c0 	.word	0x200016c0
 8000bf8:	20000274 	.word	0x20000274
 8000bfc:	3fe00000 	.word	0x3fe00000
 8000c00:	200016c4 	.word	0x200016c4
 8000c04:	200012b4 	.word	0x200012b4
 8000c08:	08005000 	.word	0x08005000
 8000c0c:	08007574 	.word	0x08007574
 8000c10:	200016c8 	.word	0x200016c8
 8000c14:	200012ac 	.word	0x200012ac
 8000c18:	200012b8 	.word	0x200012b8
 8000c1c:	200016b8 	.word	0x200016b8

08000c20 <flashWord>:


uint8_t flashWord(uint32_t dataToFlash)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	if(flashStatus == Unlocked)
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <flashWord+0x9c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d140      	bne.n	8000cb2 <flashWord+0x92>
		{
		  volatile HAL_StatusTypeDef status;
		  uint8_t flash_attempt = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	75fb      	strb	r3, [r7, #23]
		  uint32_t address;
		  do
		  {
			  address=APP1_START+Flashed_offset;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <flashWord+0xa0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c3c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8000c40:	613b      	str	r3, [r7, #16]
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, dataToFlash);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f04f 0400 	mov.w	r4, #0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	6939      	ldr	r1, [r7, #16]
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f001 f962 	bl	8001f18 <HAL_FLASH_Program>
 8000c54:	4603      	mov	r3, r0
 8000c56:	73fb      	strb	r3, [r7, #15]
			  flash_attempt++;
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	75fb      	strb	r3, [r7, #23]
		  }while(status != HAL_OK && flash_attempt < 10 && dataToFlash == readWord(address));
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d009      	beq.n	8000c7a <flashWord+0x5a>
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	2b09      	cmp	r3, #9
 8000c6a:	d806      	bhi.n	8000c7a <flashWord+0x5a>
 8000c6c:	6938      	ldr	r0, [r7, #16]
 8000c6e:	f000 f82b 	bl	8000cc8 <readWord>
 8000c72:	4602      	mov	r2, r0
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d0dc      	beq.n	8000c34 <flashWord+0x14>
		  if(status != HAL_OK)
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <flashWord+0x68>
		  	  {
		  		  Error_Handler();
 8000c82:	f000 feb1 	bl	80019e8 <Error_Handler>
 8000c86:	e014      	b.n	8000cb2 <flashWord+0x92>
		  	  }else
		  	  {//Word Flash Successful
		  		  Flashed_offset += 4;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <flashWord+0xa0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <flashWord+0xa0>)
 8000c90:	6013      	str	r3, [r2, #0]
		  		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000c92:	2102      	movs	r1, #2
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <flashWord+0xa4>)
 8000c96:	f001 fdb0 	bl	80027fa <HAL_GPIO_TogglePin>
		  		HAL_Delay(100);
 8000c9a:	2064      	movs	r0, #100	; 0x64
 8000c9c:	f001 f836 	bl	8001d0c <HAL_Delay>
		  		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <flashWord+0xa4>)
 8000ca4:	f001 fda9 	bl	80027fa <HAL_GPIO_TogglePin>
		  		HAL_Delay(100);
 8000ca8:	2064      	movs	r0, #100	; 0x64
 8000caa:	f001 f82f 	bl	8001d0c <HAL_Delay>
				return 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <flashWord+0x94>
		  	  }
		}

		return 0;
 8000cb2:	2300      	movs	r3, #0

}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	371c      	adds	r7, #28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	20000278 	.word	0x20000278
 8000cc0:	200012b0 	.word	0x200012b0
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <readWord>:


uint32_t readWord(uint32_t address)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	uint32_t read_data;
	read_data = *(uint32_t*)address;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
	return read_data;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
	...

08000ce4 <unlockFlashAndEraseMemory>:
		Flashed_offset = 0;
	}


void unlockFlashAndEraseMemory()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
	/* Unock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Unlock()!=HAL_OK)
 8000cea:	e005      	b.n	8000cf8 <unlockFlashAndEraseMemory+0x14>
		while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt
 8000cec:	bf00      	nop
 8000cee:	f001 f9a9 	bl	8002044 <HAL_FLASH_Lock>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1fa      	bne.n	8000cee <unlockFlashAndEraseMemory+0xa>
	while(HAL_FLASH_Unlock()!=HAL_OK)
 8000cf8:	f001 f97e 	bl	8001ff8 <HAL_FLASH_Unlock>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f4      	bne.n	8000cec <unlockFlashAndEraseMemory+0x8>

	/* Allow Access to option bytes sector */
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 8000d02:	e005      	b.n	8000d10 <unlockFlashAndEraseMemory+0x2c>
		while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt
 8000d04:	bf00      	nop
 8000d06:	f001 f9c9 	bl	800209c <HAL_FLASH_OB_Lock>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1fa      	bne.n	8000d06 <unlockFlashAndEraseMemory+0x22>
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 8000d10:	f001 f9a8 	bl	8002064 <HAL_FLASH_OB_Unlock>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f4      	bne.n	8000d04 <unlockFlashAndEraseMemory+0x20>

	if(flashStatus != Erased)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <unlockFlashAndEraseMemory+0x78>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d014      	beq.n	8000d4c <unlockFlashAndEraseMemory+0x68>
	{
		/* Fill EraseInit structure*/
		FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]

			EraseInitStruct.PageAddress = APP1_START;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <unlockFlashAndEraseMemory+0x7c>)
 8000d28:	613b      	str	r3, [r7, #16]

		EraseInitStruct.NbPages = FLASH_BANK_SIZE/FLASH_PAGE_SIZE_USER;
 8000d2a:	2316      	movs	r3, #22
 8000d2c:	617b      	str	r3, [r7, #20]
		uint32_t PageError;

		volatile HAL_StatusTypeDef status_erase;
		status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000d2e:	1d3a      	adds	r2, r7, #4
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fa72 	bl	8002220 <HAL_FLASHEx_Erase>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	70fb      	strb	r3, [r7, #3]

		if(status_erase != HAL_OK)
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <unlockFlashAndEraseMemory+0x68>
			Error_Handler();
 8000d48:	f000 fe4e 	bl	80019e8 <Error_Handler>
	}

	flashStatus = Unlocked;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <unlockFlashAndEraseMemory+0x78>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	701a      	strb	r2, [r3, #0]
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000278 	.word	0x20000278
 8000d60:	08005000 	.word	0x08005000

08000d64 <lockFlash>:


void lockFlash()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	/* Lock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Lock()!=HAL_OK)
 8000d68:	e005      	b.n	8000d76 <lockFlash+0x12>
		while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt
 8000d6a:	bf00      	nop
 8000d6c:	f001 f944 	bl	8001ff8 <HAL_FLASH_Unlock>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1fa      	bne.n	8000d6c <lockFlash+0x8>
	while(HAL_FLASH_Lock()!=HAL_OK)
 8000d76:	f001 f965 	bl	8002044 <HAL_FLASH_Lock>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1f4      	bne.n	8000d6a <lockFlash+0x6>

	/* Lock Access to option bytes sector */
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000d80:	e005      	b.n	8000d8e <lockFlash+0x2a>
		while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt
 8000d82:	bf00      	nop
 8000d84:	f001 f96e 	bl	8002064 <HAL_FLASH_OB_Unlock>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1fa      	bne.n	8000d84 <lockFlash+0x20>
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000d8e:	f001 f985 	bl	800209c <HAL_FLASH_OB_Lock>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f4      	bne.n	8000d82 <lockFlash+0x1e>

	flashStatus = Locked;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <lockFlash+0x40>)
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	701a      	strb	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000278 	.word	0x20000278

08000da8 <jumpToApp>:


void jumpToApp(const uint32_t address)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	const JumpStruct* vector_p = (JumpStruct*)address;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	60fb      	str	r3, [r7, #12]

	deinitEverything();
 8000db4:	f000 f80c 	bl	8000dd0 <deinitEverything>

	/* let's do The Jump! */
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	6852      	ldr	r2, [r2, #4]
 8000dc0:	f383 8808 	msr	MSP, r3
 8000dc4:	4710      	bx	r2
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <deinitEverything>:

void deinitEverything()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	//-- reset peripherals to guarantee flawless start of user application
	HAL_GPIO_DeInit(LED_R_GPIO_Port, LED_R_Pin|LED_G_Pin|LED_B_Pin);
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <deinitEverything+0x5c>)
 8000dd8:	f001 fc24 	bl	8002624 <HAL_GPIO_DeInit>

	  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <deinitEverything+0x60>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <deinitEverything+0x60>)
 8000de2:	f023 0310 	bic.w	r3, r3, #16
 8000de6:	6193      	str	r3, [r2, #24]
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <deinitEverything+0x60>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <deinitEverything+0x60>)
 8000dee:	f023 0320 	bic.w	r3, r3, #32
 8000df2:	6193      	str	r3, [r2, #24]
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <deinitEverything+0x60>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <deinitEverything+0x60>)
 8000dfa:	f023 0308 	bic.w	r3, r3, #8
 8000dfe:	6193      	str	r3, [r2, #24]
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <deinitEverything+0x60>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <deinitEverything+0x60>)
 8000e06:	f023 0304 	bic.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
	HAL_RCC_DeInit();
 8000e0c:	f001 fd0e 	bl	800282c <HAL_RCC_DeInit>
	HAL_DeInit();
 8000e10:	f000 ff12 	bl	8001c38 <HAL_DeInit>
	SysTick->CTRL = 0;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <deinitEverything+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <deinitEverything+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <deinitEverything+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40021000 	.word	0x40021000
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <Bootloader_CheckSize>:

uint8_t Bootloader_CheckSize(uint32_t appsize)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    return ((FLASH_BASE + FLASH_BANK1_END - APP1_START) >= appsize) ? 1
                                                                : 0;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <Bootloader_CheckSize+0x20>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	bf94      	ite	ls
 8000e48:	2301      	movls	r3, #1
 8000e4a:	2300      	movhi	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	0801afff 	.word	0x0801afff

08000e5c <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2101      	movs	r1, #1
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <SELECT+0x14>)
 8000e66:	f001 fcb0 	bl	80027ca <HAL_GPIO_WritePin>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <DESELECT+0x14>)
 8000e7e:	f001 fca4 	bl	80027ca <HAL_GPIO_WritePin>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000e96:	bf00      	nop
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <SPI_TxByte+0x30>)
 8000e9a:	f002 fcad 	bl	80037f8 <HAL_SPI_GetState>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d1f9      	bne.n	8000e98 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000ea4:	1df9      	adds	r1, r7, #7
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <SPI_TxByte+0x30>)
 8000eae:	f002 f9c5 	bl	800323c <HAL_SPI_Transmit>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200026f4 	.word	0x200026f4

08000ec0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000ec6:	23ff      	movs	r3, #255	; 0xff
 8000ec8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000ece:	bf00      	nop
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <SPI_RxByte+0x38>)
 8000ed2:	f002 fc91 	bl	80037f8 <HAL_SPI_GetState>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d1f9      	bne.n	8000ed0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000edc:	1dba      	adds	r2, r7, #6
 8000ede:	1df9      	adds	r1, r7, #7
 8000ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <SPI_RxByte+0x38>)
 8000eea:	f002 fae3 	bl	80034b4 <HAL_SPI_TransmitReceive>

  return data;
 8000eee:	79bb      	ldrb	r3, [r7, #6]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200026f4 	.word	0x200026f4

08000efc <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f04:	f7ff ffdc 	bl	8000ec0 <SPI_RxByte>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	701a      	strb	r2, [r3, #0]
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <SD_ReadyWait+0x34>)
 8000f20:	2232      	movs	r2, #50	; 0x32
 8000f22:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000f24:	f7ff ffcc 	bl	8000ec0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000f28:	f7ff ffca 	bl	8000ec0 <SPI_RxByte>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d004      	beq.n	8000f40 <SD_ReadyWait+0x28>
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SD_ReadyWait+0x34>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f3      	bne.n	8000f28 <SD_ReadyWait+0x10>

  return res;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000274c 	.word	0x2000274c

08000f50 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000f56:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000f5a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000f5c:	f7ff ff8a 	bl	8000e74 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	e005      	b.n	8000f72 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000f66:	20ff      	movs	r0, #255	; 0xff
 8000f68:	f7ff ff90 	bl	8000e8c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	ddf6      	ble.n	8000f66 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000f78:	f7ff ff70 	bl	8000e5c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000f7c:	2340      	movs	r3, #64	; 0x40
 8000f7e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000f90:	2395      	movs	r3, #149	; 0x95
 8000f92:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e009      	b.n	8000fae <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000f9a:	1d3a      	adds	r2, r7, #4
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff72 	bl	8000e8c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b05      	cmp	r3, #5
 8000fb2:	ddf2      	ble.n	8000f9a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000fb4:	e002      	b.n	8000fbc <SD_PowerOn+0x6c>
  {
    Count--;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000fbc:	f7ff ff80 	bl	8000ec0 <SPI_RxByte>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d002      	beq.n	8000fcc <SD_PowerOn+0x7c>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f4      	bne.n	8000fb6 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000fcc:	f7ff ff52 	bl	8000e74 <DESELECT>
  SPI_TxByte(0XFF);
 8000fd0:	20ff      	movs	r0, #255	; 0xff
 8000fd2:	f7ff ff5b 	bl	8000e8c <SPI_TxByte>

  PowerFlag = 1;
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <SD_PowerOn+0x94>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000045 	.word	0x20000045

08000fe8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <SD_PowerOff+0x14>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000045 	.word	0x20000045

08001000 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <SD_CheckPower+0x10>)
 8001006:	781b      	ldrb	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	20000045 	.word	0x20000045

08001014 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <SD_RxDataBlock+0x68>)
 8001020:	220a      	movs	r2, #10
 8001022:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001024:	f7ff ff4c 	bl	8000ec0 <SPI_RxByte>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2bff      	cmp	r3, #255	; 0xff
 8001030:	d104      	bne.n	800103c <SD_RxDataBlock+0x28>
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <SD_RxDataBlock+0x68>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f3      	bne.n	8001024 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	2bfe      	cmp	r3, #254	; 0xfe
 8001040:	d001      	beq.n	8001046 <SD_RxDataBlock+0x32>
    return FALSE;
 8001042:	2300      	movs	r3, #0
 8001044:	e016      	b.n	8001074 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff55 	bl	8000efc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff4f 	bl	8000efc <SPI_RxBytePtr>
  } while(btr -= 2);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3b02      	subs	r3, #2
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1ed      	bne.n	8001046 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800106a:	f7ff ff29 	bl	8000ec0 <SPI_RxByte>
  SPI_RxByte();
 800106e:	f7ff ff27 	bl	8000ec0 <SPI_RxByte>

  return TRUE;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000274d 	.word	0x2000274d

08001080 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001090:	f7ff ff42 	bl	8000f18 <SD_ReadyWait>
 8001094:	4603      	mov	r3, r0
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	d001      	beq.n	800109e <SD_TxDataBlock+0x1e>
    return FALSE;
 800109a:	2300      	movs	r3, #0
 800109c:	e040      	b.n	8001120 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fef3 	bl	8000e8c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	2bfd      	cmp	r3, #253	; 0xfd
 80010aa:	d031      	beq.n	8001110 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fee7 	bl	8000e8c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fee0 	bl	8000e8c <SPI_TxByte>
    } while (--wc);
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	73bb      	strb	r3, [r7, #14]
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1eb      	bne.n	80010b0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80010d8:	f7ff fef2 	bl	8000ec0 <SPI_RxByte>
    SPI_RxByte();
 80010dc:	f7ff fef0 	bl	8000ec0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80010e0:	e00b      	b.n	80010fa <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80010e2:	f7ff feed 	bl	8000ec0 <SPI_RxByte>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d006      	beq.n	8001102 <SD_TxDataBlock+0x82>
        break;

      i++;
 80010f4:	7b7b      	ldrb	r3, [r7, #13]
 80010f6:	3301      	adds	r3, #1
 80010f8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80010fa:	7b7b      	ldrb	r3, [r7, #13]
 80010fc:	2b40      	cmp	r3, #64	; 0x40
 80010fe:	d9f0      	bls.n	80010e2 <SD_TxDataBlock+0x62>
 8001100:	e000      	b.n	8001104 <SD_TxDataBlock+0x84>
        break;
 8001102:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001104:	bf00      	nop
 8001106:	f7ff fedb 	bl	8000ec0 <SPI_RxByte>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0fa      	beq.n	8001106 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	2b05      	cmp	r3, #5
 8001118:	d101      	bne.n	800111e <SD_TxDataBlock+0x9e>
    return TRUE;
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001134:	f7ff fef0 	bl	8000f18 <SD_ReadyWait>
 8001138:	4603      	mov	r3, r0
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d001      	beq.n	8001142 <SD_SendCmd+0x1a>
    return 0xFF;
 800113e:	23ff      	movs	r3, #255	; 0xff
 8001140:	e040      	b.n	80011c4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fea1 	bl	8000e8c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	0e1b      	lsrs	r3, r3, #24
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe9b 	bl	8000e8c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe95 	bl	8000e8c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fe8f 	bl	8000e8c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fe8a 	bl	8000e8c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b40      	cmp	r3, #64	; 0x40
 8001180:	d101      	bne.n	8001186 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001182:	2395      	movs	r3, #149	; 0x95
 8001184:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b48      	cmp	r3, #72	; 0x48
 800118a:	d101      	bne.n	8001190 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800118c:	2387      	movs	r3, #135	; 0x87
 800118e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fe7a 	bl	8000e8c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b4c      	cmp	r3, #76	; 0x4c
 800119c:	d101      	bne.n	80011a2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800119e:	f7ff fe8f 	bl	8000ec0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80011a2:	230a      	movs	r3, #10
 80011a4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80011a6:	f7ff fe8b 	bl	8000ec0 <SPI_RxByte>
 80011aa:	4603      	mov	r3, r0
 80011ac:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80011ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da05      	bge.n	80011c2 <SD_SendCmd+0x9a>
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	73bb      	strb	r3, [r7, #14]
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f1      	bne.n	80011a6 <SD_SendCmd+0x7e>

  return res;
 80011c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0d5      	b.n	800138c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80011e0:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <SD_disk_initialize+0x1c8>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <SD_disk_initialize+0x2a>
    return Stat;
 80011ee:	4b69      	ldr	r3, [pc, #420]	; (8001394 <SD_disk_initialize+0x1c8>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	e0ca      	b.n	800138c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80011f6:	f7ff feab 	bl	8000f50 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80011fa:	f7ff fe2f 	bl	8000e5c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001202:	2100      	movs	r1, #0
 8001204:	2040      	movs	r0, #64	; 0x40
 8001206:	f7ff ff8f 	bl	8001128 <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	f040 80a5 	bne.w	800135c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001212:	4b61      	ldr	r3, [pc, #388]	; (8001398 <SD_disk_initialize+0x1cc>)
 8001214:	2264      	movs	r2, #100	; 0x64
 8001216:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001218:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800121c:	2048      	movs	r0, #72	; 0x48
 800121e:	f7ff ff83 	bl	8001128 <SD_SendCmd>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d158      	bne.n	80012da <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e00c      	b.n	8001248 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800122e:	7bfc      	ldrb	r4, [r7, #15]
 8001230:	f7ff fe46 	bl	8000ec0 <SPI_RxByte>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4423      	add	r3, r4
 800123e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	3301      	adds	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d9ef      	bls.n	800122e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800124e:	7abb      	ldrb	r3, [r7, #10]
 8001250:	2b01      	cmp	r3, #1
 8001252:	f040 8083 	bne.w	800135c <SD_disk_initialize+0x190>
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	2baa      	cmp	r3, #170	; 0xaa
 800125a:	d17f      	bne.n	800135c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800125c:	2100      	movs	r1, #0
 800125e:	2077      	movs	r0, #119	; 0x77
 8001260:	f7ff ff62 	bl	8001128 <SD_SendCmd>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	d807      	bhi.n	800127a <SD_disk_initialize+0xae>
 800126a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800126e:	2069      	movs	r0, #105	; 0x69
 8001270:	f7ff ff5a 	bl	8001128 <SD_SendCmd>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <SD_disk_initialize+0x1cc>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1eb      	bne.n	800125c <SD_disk_initialize+0x90>
 8001284:	e000      	b.n	8001288 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001286:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001288:	4b43      	ldr	r3, [pc, #268]	; (8001398 <SD_disk_initialize+0x1cc>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d064      	beq.n	800135c <SD_disk_initialize+0x190>
 8001292:	2100      	movs	r1, #0
 8001294:	207a      	movs	r0, #122	; 0x7a
 8001296:	f7ff ff47 	bl	8001128 <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d15d      	bne.n	800135c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e00c      	b.n	80012c0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80012a6:	7bfc      	ldrb	r4, [r7, #15]
 80012a8:	f7ff fe0a 	bl	8000ec0 <SPI_RxByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4423      	add	r3, r4
 80012b6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d9ef      	bls.n	80012a6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80012c6:	7a3b      	ldrb	r3, [r7, #8]
 80012c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SD_disk_initialize+0x108>
 80012d0:	2306      	movs	r3, #6
 80012d2:	e000      	b.n	80012d6 <SD_disk_initialize+0x10a>
 80012d4:	2302      	movs	r3, #2
 80012d6:	73bb      	strb	r3, [r7, #14]
 80012d8:	e040      	b.n	800135c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80012da:	2100      	movs	r1, #0
 80012dc:	2077      	movs	r0, #119	; 0x77
 80012de:	f7ff ff23 	bl	8001128 <SD_SendCmd>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d808      	bhi.n	80012fa <SD_disk_initialize+0x12e>
 80012e8:	2100      	movs	r1, #0
 80012ea:	2069      	movs	r0, #105	; 0x69
 80012ec:	f7ff ff1c 	bl	8001128 <SD_SendCmd>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d801      	bhi.n	80012fa <SD_disk_initialize+0x12e>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e000      	b.n	80012fc <SD_disk_initialize+0x130>
 80012fa:	2301      	movs	r3, #1
 80012fc:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d10e      	bne.n	8001322 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001304:	2100      	movs	r1, #0
 8001306:	2077      	movs	r0, #119	; 0x77
 8001308:	f7ff ff0e 	bl	8001128 <SD_SendCmd>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d80e      	bhi.n	8001330 <SD_disk_initialize+0x164>
 8001312:	2100      	movs	r1, #0
 8001314:	2069      	movs	r0, #105	; 0x69
 8001316:	f7ff ff07 	bl	8001128 <SD_SendCmd>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001320:	e00d      	b.n	800133e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001322:	2100      	movs	r1, #0
 8001324:	2041      	movs	r0, #65	; 0x41
 8001326:	f7ff feff 	bl	8001128 <SD_SendCmd>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <SD_disk_initialize+0x1cc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1e1      	bne.n	80012fe <SD_disk_initialize+0x132>
 800133a:	e000      	b.n	800133e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800133c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <SD_disk_initialize+0x1cc>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <SD_disk_initialize+0x18c>
 8001348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134c:	2050      	movs	r0, #80	; 0x50
 800134e:	f7ff feeb 	bl	8001128 <SD_SendCmd>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <SD_disk_initialize+0x1d0>)
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001362:	f7ff fd87 	bl	8000e74 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001366:	f7ff fdab 	bl	8000ec0 <SPI_RxByte>

  if (type)
 800136a:	7bbb      	ldrb	r3, [r7, #14]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <SD_disk_initialize+0x1c8>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SD_disk_initialize+0x1c8>)
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e001      	b.n	8001386 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001382:	f7ff fe31 	bl	8000fe8 <SD_PowerOff>
  }

  return Stat;
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <SD_disk_initialize+0x1c8>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b2db      	uxtb	r3, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	20000000 	.word	0x20000000
 8001398:	2000274d 	.word	0x2000274d
 800139c:	20000044 	.word	0x20000044

080013a0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e002      	b.n	80013ba <SD_disk_status+0x1a>

  return Stat;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <SD_disk_status+0x24>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000000 	.word	0x20000000

080013c8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	4603      	mov	r3, r0
 80013d6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <SD_disk_read+0x1c>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <SD_disk_read+0x20>
    return RES_PARERR;
 80013e4:	2304      	movs	r3, #4
 80013e6:	e051      	b.n	800148c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <SD_disk_read+0xcc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SD_disk_read+0x32>
    return RES_NOTRDY;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e048      	b.n	800148c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80013fa:	4b27      	ldr	r3, [pc, #156]	; (8001498 <SD_disk_read+0xd0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	025b      	lsls	r3, r3, #9
 800140a:	607b      	str	r3, [r7, #4]

  SELECT();
 800140c:	f7ff fd26 	bl	8000e5c <SELECT>

  if (count == 1)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d111      	bne.n	800143a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	2051      	movs	r0, #81	; 0x51
 800141a:	f7ff fe85 	bl	8001128 <SD_SendCmd>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d129      	bne.n	8001478 <SD_disk_read+0xb0>
 8001424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f7ff fdf3 	bl	8001014 <SD_RxDataBlock>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d021      	beq.n	8001478 <SD_disk_read+0xb0>
      count = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	e01e      	b.n	8001478 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	2052      	movs	r0, #82	; 0x52
 800143e:	f7ff fe73 	bl	8001128 <SD_SendCmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d117      	bne.n	8001478 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144c:	68b8      	ldr	r0, [r7, #8]
 800144e:	f7ff fde1 	bl	8001014 <SD_RxDataBlock>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00a      	beq.n	800146e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800145e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ed      	bne.n	8001448 <SD_disk_read+0x80>
 800146c:	e000      	b.n	8001470 <SD_disk_read+0xa8>
          break;
 800146e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001470:	2100      	movs	r1, #0
 8001472:	204c      	movs	r0, #76	; 0x4c
 8001474:	f7ff fe58 	bl	8001128 <SD_SendCmd>
    }
  }

  DESELECT();
 8001478:	f7ff fcfc 	bl	8000e74 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800147c:	f7ff fd20 	bl	8000ec0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	bf14      	ite	ne
 8001486:	2301      	movne	r3, #1
 8001488:	2300      	moveq	r3, #0
 800148a:	b2db      	uxtb	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000000 	.word	0x20000000
 8001498:	20000044 	.word	0x20000044

0800149c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <SD_disk_write+0x1c>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <SD_disk_write+0x20>
    return RES_PARERR;
 80014b8:	2304      	movs	r3, #4
 80014ba:	e06b      	b.n	8001594 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <SD_disk_write+0x100>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SD_disk_write+0x32>
    return RES_NOTRDY;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e062      	b.n	8001594 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <SD_disk_write+0x100>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80014dc:	2302      	movs	r3, #2
 80014de:	e059      	b.n	8001594 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80014e0:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <SD_disk_write+0x104>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	025b      	lsls	r3, r3, #9
 80014f0:	607b      	str	r3, [r7, #4]

  SELECT();
 80014f2:	f7ff fcb3 	bl	8000e5c <SELECT>

  if (count == 1)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d110      	bne.n	800151e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	2058      	movs	r0, #88	; 0x58
 8001500:	f7ff fe12 	bl	8001128 <SD_SendCmd>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d13a      	bne.n	8001580 <SD_disk_write+0xe4>
 800150a:	21fe      	movs	r1, #254	; 0xfe
 800150c:	68b8      	ldr	r0, [r7, #8]
 800150e:	f7ff fdb7 	bl	8001080 <SD_TxDataBlock>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d033      	beq.n	8001580 <SD_disk_write+0xe4>
      count = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	e030      	b.n	8001580 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <SD_disk_write+0x104>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800152a:	2100      	movs	r1, #0
 800152c:	2077      	movs	r0, #119	; 0x77
 800152e:	f7ff fdfb 	bl	8001128 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	2057      	movs	r0, #87	; 0x57
 8001536:	f7ff fdf7 	bl	8001128 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	2059      	movs	r0, #89	; 0x59
 800153e:	f7ff fdf3 	bl	8001128 <SD_SendCmd>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11b      	bne.n	8001580 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001548:	21fc      	movs	r1, #252	; 0xfc
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f7ff fd98 	bl	8001080 <SD_TxDataBlock>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00a      	beq.n	800156c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800155c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3b01      	subs	r3, #1
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1ee      	bne.n	8001548 <SD_disk_write+0xac>
 800156a:	e000      	b.n	800156e <SD_disk_write+0xd2>
          break;
 800156c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800156e:	21fd      	movs	r1, #253	; 0xfd
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff fd85 	bl	8001080 <SD_TxDataBlock>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <SD_disk_write+0xe4>
      {
        count = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001580:	f7ff fc78 	bl	8000e74 <DESELECT>
  SPI_RxByte();
 8001584:	f7ff fc9c 	bl	8000ec0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000044 	.word	0x20000044

080015a4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b08b      	sub	sp, #44	; 0x2c
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	603a      	str	r2, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	460b      	mov	r3, r1
 80015b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80015be:	2304      	movs	r3, #4
 80015c0:	e117      	b.n	80017f2 <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80015c8:	79bb      	ldrb	r3, [r7, #6]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d126      	bne.n	800161c <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d00e      	beq.n	80015f4 <SD_disk_ioctl+0x50>
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d012      	beq.n	8001600 <SD_disk_ioctl+0x5c>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d11a      	bne.n	8001614 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80015de:	f7ff fd0f 	bl	8001000 <SD_CheckPower>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80015e8:	f7ff fcfe 	bl	8000fe8 <SD_PowerOff>
      res = RES_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015f2:	e0fc      	b.n	80017ee <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 80015f4:	f7ff fcac 	bl	8000f50 <SD_PowerOn>
      res = RES_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015fe:	e0f6      	b.n	80017ee <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	1c5c      	adds	r4, r3, #1
 8001604:	f7ff fcfc 	bl	8001000 <SD_CheckPower>
 8001608:	4603      	mov	r3, r0
 800160a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001612:	e0ec      	b.n	80017ee <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8001614:	2304      	movs	r3, #4
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800161a:	e0e8      	b.n	80017ee <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800161c:	4b77      	ldr	r3, [pc, #476]	; (80017fc <SD_disk_ioctl+0x258>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 800162a:	2303      	movs	r3, #3
 800162c:	e0e1      	b.n	80017f2 <SD_disk_ioctl+0x24e>

    SELECT();
 800162e:	f7ff fc15 	bl	8000e5c <SELECT>

    switch (ctrl)
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	2b0d      	cmp	r3, #13
 8001636:	f200 80cb 	bhi.w	80017d0 <SD_disk_ioctl+0x22c>
 800163a:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <SD_disk_ioctl+0x9c>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	0800173b 	.word	0x0800173b
 8001644:	08001679 	.word	0x08001679
 8001648:	0800172b 	.word	0x0800172b
 800164c:	080017d1 	.word	0x080017d1
 8001650:	080017d1 	.word	0x080017d1
 8001654:	080017d1 	.word	0x080017d1
 8001658:	080017d1 	.word	0x080017d1
 800165c:	080017d1 	.word	0x080017d1
 8001660:	080017d1 	.word	0x080017d1
 8001664:	080017d1 	.word	0x080017d1
 8001668:	080017d1 	.word	0x080017d1
 800166c:	0800174d 	.word	0x0800174d
 8001670:	08001771 	.word	0x08001771
 8001674:	08001795 	.word	0x08001795
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001678:	2100      	movs	r1, #0
 800167a:	2049      	movs	r0, #73	; 0x49
 800167c:	f7ff fd54 	bl	8001128 <SD_SendCmd>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80a8 	bne.w	80017d8 <SD_disk_ioctl+0x234>
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2110      	movs	r1, #16
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fcc0 	bl	8001014 <SD_RxDataBlock>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 809e 	beq.w	80017d8 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d10e      	bne.n	80016c4 <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016a6:	7d7b      	ldrb	r3, [r7, #21]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	7d3b      	ldrb	r3, [r7, #20]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80016ba:	8bfb      	ldrh	r3, [r7, #30]
 80016bc:	029a      	lsls	r2, r3, #10
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e02e      	b.n	8001722 <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016c4:	7c7b      	ldrb	r3, [r7, #17]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	7dbb      	ldrb	r3, [r7, #22]
 80016ce:	09db      	lsrs	r3, r3, #7
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	7d7b      	ldrb	r3, [r7, #21]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f003 0306 	and.w	r3, r3, #6
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3302      	adds	r3, #2
 80016e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80016ec:	7d3b      	ldrb	r3, [r7, #20]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	7cfb      	ldrb	r3, [r7, #19]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	b29a      	uxth	r2, r3
 8001700:	7cbb      	ldrb	r3, [r7, #18]
 8001702:	029b      	lsls	r3, r3, #10
 8001704:	b29b      	uxth	r3, r3
 8001706:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800170a:	b29b      	uxth	r3, r3
 800170c:	4413      	add	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001714:	8bfa      	ldrh	r2, [r7, #30]
 8001716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800171a:	3b09      	subs	r3, #9
 800171c:	409a      	lsls	r2, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001728:	e056      	b.n	80017d8 <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001738:	e055      	b.n	80017e6 <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800173a:	f7ff fbed 	bl	8000f18 <SD_ReadyWait>
 800173e:	4603      	mov	r3, r0
 8001740:	2bff      	cmp	r3, #255	; 0xff
 8001742:	d14b      	bne.n	80017dc <SD_disk_ioctl+0x238>
        res = RES_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800174a:	e047      	b.n	80017dc <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800174c:	2100      	movs	r1, #0
 800174e:	2049      	movs	r0, #73	; 0x49
 8001750:	f7ff fcea 	bl	8001128 <SD_SendCmd>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d142      	bne.n	80017e0 <SD_disk_ioctl+0x23c>
 800175a:	2110      	movs	r1, #16
 800175c:	6a38      	ldr	r0, [r7, #32]
 800175e:	f7ff fc59 	bl	8001014 <SD_RxDataBlock>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d03b      	beq.n	80017e0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800176e:	e037      	b.n	80017e0 <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001770:	2100      	movs	r1, #0
 8001772:	204a      	movs	r0, #74	; 0x4a
 8001774:	f7ff fcd8 	bl	8001128 <SD_SendCmd>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d132      	bne.n	80017e4 <SD_disk_ioctl+0x240>
 800177e:	2110      	movs	r1, #16
 8001780:	6a38      	ldr	r0, [r7, #32]
 8001782:	f7ff fc47 	bl	8001014 <SD_RxDataBlock>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02b      	beq.n	80017e4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001792:	e027      	b.n	80017e4 <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001794:	2100      	movs	r1, #0
 8001796:	207a      	movs	r0, #122	; 0x7a
 8001798:	f7ff fcc6 	bl	8001128 <SD_SendCmd>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017a8:	e00b      	b.n	80017c2 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 80017aa:	6a3c      	ldr	r4, [r7, #32]
 80017ac:	1c63      	adds	r3, r4, #1
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	f7ff fb86 	bl	8000ec0 <SPI_RxByte>
 80017b4:	4603      	mov	r3, r0
 80017b6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80017b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017bc:	3301      	adds	r3, #1
 80017be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d9ef      	bls.n	80017aa <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80017d0:	2304      	movs	r3, #4
 80017d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017d6:	e006      	b.n	80017e6 <SD_disk_ioctl+0x242>
      break;
 80017d8:	bf00      	nop
 80017da:	e004      	b.n	80017e6 <SD_disk_ioctl+0x242>
      break;
 80017dc:	bf00      	nop
 80017de:	e002      	b.n	80017e6 <SD_disk_ioctl+0x242>
      break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <SD_disk_ioctl+0x242>
      break;
 80017e4:	bf00      	nop
    }

    DESELECT();
 80017e6:	f7ff fb45 	bl	8000e74 <DESELECT>
    SPI_RxByte();
 80017ea:	f7ff fb69 	bl	8000ec0 <SPI_RxByte>
  }

  return res;
 80017ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	372c      	adds	r7, #44	; 0x2c
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000000 	.word	0x20000000

08001800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001804:	f000 fa02 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001808:	f000 f809 	bl	800181e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180c:	f000 f882 	bl	8001914 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001810:	f000 f84a 	bl	80018a8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001814:	f002 f8a4 	bl	8003960 <MX_FATFS_Init>
  bootloaderInit();
 8001818:	f7ff f886 	bl	8000928 <bootloaderInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800181c:	e7fe      	b.n	800181c <main+0x1c>

0800181e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b090      	sub	sp, #64	; 0x40
 8001822:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001824:	f107 0318 	add.w	r3, r7, #24
 8001828:	2228      	movs	r2, #40	; 0x28
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f005 fe8b 	bl	8007548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001840:	2301      	movs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001848:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184e:	2301      	movs	r3, #1
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001852:	2302      	movs	r3, #2
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800185c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	4618      	mov	r0, r3
 8001868:	f001 f87a 	bl	8002960 <HAL_RCC_OscConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001872:	f000 f8b9 	bl	80019e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001876:	230f      	movs	r3, #15
 8001878:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187a:	2302      	movs	r3, #2
 800187c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2102      	movs	r1, #2
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fae5 	bl	8002e60 <HAL_RCC_ClockConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800189c:	f000 f8a4 	bl	80019e8 <Error_Handler>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3740      	adds	r7, #64	; 0x40
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI1_Init+0x64>)
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <MX_SPI1_Init+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI1_Init+0x64>)
 80018b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI1_Init+0x64>)
 80018d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI1_Init+0x64>)
 80018dc:	2210      	movs	r2, #16
 80018de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI1_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_SPI1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI1_Init+0x64>)
 80018f4:	220a      	movs	r2, #10
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_SPI1_Init+0x64>)
 80018fa:	f001 fc1b 	bl	8003134 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001904:	f000 f870 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200026f4 	.word	0x200026f4
 8001910:	40013000 	.word	0x40013000

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001928:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <MX_GPIO_Init+0xc8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <MX_GPIO_Init+0xc8>)
 800192e:	f043 0320 	orr.w	r3, r3, #32
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a25      	ldr	r2, [pc, #148]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <MX_GPIO_Init+0xc8>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <MX_GPIO_Init+0xc8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <MX_GPIO_Init+0xc8>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_B_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	2107      	movs	r1, #7
 8001974:	481a      	ldr	r0, [pc, #104]	; (80019e0 <MX_GPIO_Init+0xcc>)
 8001976:	f000 ff28 	bl	80027ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2101      	movs	r1, #1
 800197e:	4819      	ldr	r0, [pc, #100]	; (80019e4 <MX_GPIO_Init+0xd0>)
 8001980:	f000 ff23 	bl	80027ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_B_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin|LED_G_Pin;
 8001984:	2307      	movs	r3, #7
 8001986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2302      	movs	r3, #2
 8001992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	4619      	mov	r1, r3
 800199a:	4811      	ldr	r0, [pc, #68]	; (80019e0 <MX_GPIO_Init+0xcc>)
 800199c:	f000 fce8 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80019a0:	2301      	movs	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4619      	mov	r1, r3
 80019b6:	480b      	ldr	r0, [pc, #44]	; (80019e4 <MX_GPIO_Init+0xd0>)
 80019b8:	f000 fcda 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80019bc:	2318      	movs	r3, #24
 80019be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4619      	mov	r1, r3
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_GPIO_Init+0xd0>)
 80019d0:	f000 fcce 	bl	8002370 <HAL_GPIO_Init>

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010800 	.word	0x40010800
 80019e4:	40010c00 	.word	0x40010c00

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1)
{HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);}
 80019ec:	2201      	movs	r2, #1
 80019ee:	2101      	movs	r1, #1
 80019f0:	4801      	ldr	r0, [pc, #4]	; (80019f8 <Error_Handler+0x10>)
 80019f2:	f000 feea 	bl	80027ca <HAL_GPIO_WritePin>
 80019f6:	e7f9      	b.n	80019ec <Error_Handler+0x4>
 80019f8:	40010800 	.word	0x40010800

080019fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6193      	str	r3, [r2, #24]
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_MspInit+0x60>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_MspInit+0x60>)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000

08001a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_SPI_MspInit+0x88>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d12f      	bne.n	8001ae0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_SPI_MspInit+0x8c>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_SPI_MspInit+0x8c>)
 8001a86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_SPI_MspInit+0x8c>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_SPI_MspInit+0x8c>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <HAL_SPI_MspInit+0x8c>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_SPI_MspInit+0x8c>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ab0:	23a0      	movs	r3, #160	; 0xa0
 8001ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480b      	ldr	r0, [pc, #44]	; (8001af0 <HAL_SPI_MspInit+0x90>)
 8001ac4:	f000 fc54 	bl	8002370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ac8:	2340      	movs	r3, #64	; 0x40
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_SPI_MspInit+0x90>)
 8001adc:	f000 fc48 	bl	8002370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40013000 	.word	0x40013000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010800 	.word	0x40010800

08001af4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <SDTimer_Handler+0x3c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <SDTimer_Handler+0x1c>
		Timer1--;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <SDTimer_Handler+0x3c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <SDTimer_Handler+0x3c>)
 8001b0e:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <SDTimer_Handler+0x40>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <SDTimer_Handler+0x34>
		Timer2--;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <SDTimer_Handler+0x40>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <SDTimer_Handler+0x40>)
 8001b26:	701a      	strb	r2, [r3, #0]

}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	2000274d 	.word	0x2000274d
 8001b34:	2000274c 	.word	0x2000274c

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <HardFault_Handler+0x4>

08001b4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <BusFault_Handler+0x4>

08001b56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <UsageFault_Handler+0x4>

08001b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <SysTick_Handler+0x30>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <SysTick_Handler+0x30>)
 8001b90:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <SysTick_Handler+0x30>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d904      	bls.n	8001ba6 <SysTick_Handler+0x26>
	{
		FatFsCnt=0;
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SysTick_Handler+0x30>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001ba2:	f7ff ffa7 	bl	8001af4 <SDTimer_Handler>

	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba6:	f000 f895 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000046 	.word	0x20000046

08001bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bc2:	e003      	b.n	8001bcc <LoopCopyDataInit>

08001bc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bca:	3104      	adds	r1, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bd4:	d3f6      	bcc.n	8001bc4 <CopyDataInit>
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bd8:	e002      	b.n	8001be0 <LoopFillZerobss>

08001bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bdc:	f842 3b04 	str.w	r3, [r2], #4

08001be0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001be4:	d3f9      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001be6:	f7ff ffe5 	bl	8001bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f005 fc89 	bl	8007500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff fe07 	bl	8001800 <main>
  bx lr
 8001bf2:	4770      	bx	lr
  ldr r3, =_sidata
 8001bf4:	08007b48 	.word	0x08007b48
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bfc:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8001c00:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8001c04:	200047dc 	.word	0x200047dc

08001c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x28>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f947 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f826 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fee8 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_DeInit+0x2c>)
 8001c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c42:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_DeInit+0x2c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_DeInit+0x2c>)
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <HAL_DeInit+0x2c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001c58:	f000 f806 	bl	8001c68 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_InitTick+0x54>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x58>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f933 	bl	8001efe <HAL_SYSTICK_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00e      	b.n	8001cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d80a      	bhi.n	8001cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f000 f909 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_InitTick+0x5c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000004 	.word	0x20000004
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_IncTick+0x1c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_IncTick+0x20>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a03      	ldr	r2, [pc, #12]	; (8001cf4 <HAL_IncTick+0x20>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	20002750 	.word	0x20002750

08001cf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <HAL_GetTick+0x10>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20002750 	.word	0x20002750

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_Delay+0x40>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffe0 	bl	8001cf8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	2000000c 	.word	0x2000000c

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff90 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff49 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff5e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff90 	bl	8001e08 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5f 	bl	8001db4 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffb0 	bl	8001e6c <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_FLASH_Program+0xd8>)
 8001f34:	7e1b      	ldrb	r3, [r3, #24]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_FLASH_Program+0x26>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e054      	b.n	8001fe8 <HAL_FLASH_Program+0xd0>
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_FLASH_Program+0xd8>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f48:	f000 f8d4 	bl	80020f4 <FLASH_WaitForLastOperation>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d144      	bne.n	8001fe0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d102      	bne.n	8001f62 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	757b      	strb	r3, [r7, #21]
 8001f60:	e007      	b.n	8001f72 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d102      	bne.n	8001f6e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	757b      	strb	r3, [r7, #21]
 8001f6c:	e001      	b.n	8001f72 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	75bb      	strb	r3, [r7, #22]
 8001f76:	e02d      	b.n	8001fd4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001f78:	7dbb      	ldrb	r3, [r7, #22]
 8001f7a:	005a      	lsls	r2, r3, #1
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	eb02 0c03 	add.w	ip, r2, r3
 8001f82:	7dbb      	ldrb	r3, [r7, #22]
 8001f84:	0119      	lsls	r1, r3, #4
 8001f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f8a:	f1c1 0620 	rsb	r6, r1, #32
 8001f8e:	f1a1 0020 	sub.w	r0, r1, #32
 8001f92:	fa22 f401 	lsr.w	r4, r2, r1
 8001f96:	fa03 f606 	lsl.w	r6, r3, r6
 8001f9a:	4334      	orrs	r4, r6
 8001f9c:	fa23 f000 	lsr.w	r0, r3, r0
 8001fa0:	4304      	orrs	r4, r0
 8001fa2:	fa23 f501 	lsr.w	r5, r3, r1
 8001fa6:	b2a3      	uxth	r3, r4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4660      	mov	r0, ip
 8001fac:	f000 f886 	bl	80020bc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001fb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fb4:	f000 f89e 	bl	80020f4 <FLASH_WaitForLastOperation>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_FLASH_Program+0xdc>)
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <HAL_FLASH_Program+0xdc>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d107      	bne.n	8001fde <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001fce:	7dbb      	ldrb	r3, [r7, #22]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	75bb      	strb	r3, [r7, #22]
 8001fd4:	7dba      	ldrb	r2, [r7, #22]
 8001fd6:	7d7b      	ldrb	r3, [r7, #21]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d3cd      	bcc.n	8001f78 <HAL_FLASH_Program+0x60>
 8001fdc:	e000      	b.n	8001fe0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001fde:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_FLASH_Program+0xd8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	761a      	strb	r2, [r3, #24]

  return status;
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff0:	20002758 	.word	0x20002758
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_FLASH_Unlock+0x40>)
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00d      	beq.n	800202a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_FLASH_Unlock+0x40>)
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_FLASH_Unlock+0x44>)
 8002012:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_FLASH_Unlock+0x40>)
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_FLASH_Unlock+0x48>)
 8002018:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_FLASH_Unlock+0x40>)
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800202a:	79fb      	ldrb	r3, [r7, #7]
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000
 800203c:	45670123 	.word	0x45670123
 8002040:	cdef89ab 	.word	0xcdef89ab

08002044 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_FLASH_Lock+0x1c>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_FLASH_Lock+0x1c>)
 800204e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002052:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40022000 	.word	0x40022000

08002064 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_FLASH_OB_Unlock+0x2c>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_FLASH_OB_Unlock+0x2c>)
 8002076:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_FLASH_OB_Unlock+0x30>)
 8002078:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_FLASH_OB_Unlock+0x2c>)
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_FLASH_OB_Unlock+0x34>)
 800207e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002080:	2300      	movs	r3, #0
 8002082:	e000      	b.n	8002086 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40022000 	.word	0x40022000
 8002094:	45670123 	.word	0x45670123
 8002098:	cdef89ab 	.word	0xcdef89ab

0800209c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_FLASH_OB_Lock+0x1c>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_FLASH_OB_Lock+0x1c>)
 80020a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000

080020bc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <FLASH_Program_HalfWord+0x30>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <FLASH_Program_HalfWord+0x34>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <FLASH_Program_HalfWord+0x34>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	801a      	strh	r2, [r3, #0]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20002758 	.word	0x20002758
 80020f0:	40022000 	.word	0x40022000

080020f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fdfc 	bl	8001cf8 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002102:	e010      	b.n	8002126 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210a:	d00c      	beq.n	8002126 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <FLASH_WaitForLastOperation+0x2e>
 8002112:	f7ff fdf1 	bl	8001cf8 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	d201      	bcs.n	8002126 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e025      	b.n	8002172 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <FLASH_WaitForLastOperation+0x88>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1e8      	bne.n	8002104 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <FLASH_WaitForLastOperation+0x88>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <FLASH_WaitForLastOperation+0x88>)
 8002140:	2220      	movs	r2, #32
 8002142:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <FLASH_WaitForLastOperation+0x88>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10b      	bne.n	8002168 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <FLASH_WaitForLastOperation+0x88>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <FLASH_WaitForLastOperation+0x88>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002168:	f000 f80a 	bl	8002180 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000

08002180 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <FLASH_SetErrorCode+0x98>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <FLASH_SetErrorCode+0x9c>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	4a1f      	ldr	r2, [pc, #124]	; (800221c <FLASH_SetErrorCode+0x9c>)
 80021a0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f043 0310 	orr.w	r3, r3, #16
 80021a8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <FLASH_SetErrorCode+0x98>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <FLASH_SetErrorCode+0x9c>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	4a17      	ldr	r2, [pc, #92]	; (800221c <FLASH_SetErrorCode+0x9c>)
 80021c0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <FLASH_SetErrorCode+0x98>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <FLASH_SetErrorCode+0x9c>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	4a0f      	ldr	r2, [pc, #60]	; (800221c <FLASH_SetErrorCode+0x9c>)
 80021e0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <FLASH_SetErrorCode+0x98>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <FLASH_SetErrorCode+0x98>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f240 1201 	movw	r2, #257	; 0x101
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d106      	bne.n	8002206 <FLASH_SetErrorCode+0x86>
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <FLASH_SetErrorCode+0x98>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <FLASH_SetErrorCode+0x98>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	61d3      	str	r3, [r2, #28]
}  
 8002204:	e002      	b.n	800220c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <FLASH_SetErrorCode+0x98>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	60d3      	str	r3, [r2, #12]
}  
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	20002758 	.word	0x20002758

08002220 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002232:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_FLASHEx_Erase+0xd0>)
 8002234:	7e1b      	ldrb	r3, [r3, #24]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_FLASHEx_Erase+0x1e>
 800223a:	2302      	movs	r3, #2
 800223c:	e053      	b.n	80022e6 <HAL_FLASHEx_Erase+0xc6>
 800223e:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_FLASHEx_Erase+0xd0>)
 8002240:	2201      	movs	r2, #1
 8002242:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d116      	bne.n	800227a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800224c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002250:	f7ff ff50 	bl	80020f4 <FLASH_WaitForLastOperation>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d141      	bne.n	80022de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800225a:	2001      	movs	r0, #1
 800225c:	f000 f84c 	bl	80022f8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002260:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002264:	f7ff ff46 	bl	80020f4 <FLASH_WaitForLastOperation>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_FLASHEx_Erase+0xd4>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <HAL_FLASHEx_Erase+0xd4>)
 8002272:	f023 0304 	bic.w	r3, r3, #4
 8002276:	6113      	str	r3, [r2, #16]
 8002278:	e031      	b.n	80022de <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800227a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800227e:	f7ff ff39 	bl	80020f4 <FLASH_WaitForLastOperation>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d12a      	bne.n	80022de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f04f 32ff 	mov.w	r2, #4294967295
 800228e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	e019      	b.n	80022cc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f000 f849 	bl	8002330 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800229e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022a2:	f7ff ff27 	bl	80020f4 <FLASH_WaitForLastOperation>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_FLASHEx_Erase+0xd4>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	4a11      	ldr	r2, [pc, #68]	; (80022f4 <HAL_FLASHEx_Erase+0xd4>)
 80022b0:	f023 0302 	bic.w	r3, r3, #2
 80022b4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	601a      	str	r2, [r3, #0]
            break;
 80022c2:	e00c      	b.n	80022de <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ca:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	029a      	lsls	r2, r3, #10
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d3dc      	bcc.n	8002298 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_FLASHEx_Erase+0xd0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	761a      	strb	r2, [r3, #24]

  return status;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20002758 	.word	0x20002758
 80022f4:	40022000 	.word	0x40022000

080022f8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <FLASH_MassErase+0x30>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <FLASH_MassErase+0x34>)
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <FLASH_MassErase+0x34>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <FLASH_MassErase+0x34>)
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <FLASH_MassErase+0x34>)
 8002318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800231c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	20002758 	.word	0x20002758
 800232c:	40022000 	.word	0x40022000

08002330 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <FLASH_PageErase+0x38>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <FLASH_PageErase+0x3c>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <FLASH_PageErase+0x3c>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <FLASH_PageErase+0x3c>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <FLASH_PageErase+0x3c>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <FLASH_PageErase+0x3c>)
 8002356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800235a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20002758 	.word	0x20002758
 800236c:	40022000 	.word	0x40022000

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b08b      	sub	sp, #44	; 0x2c
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002382:	e127      	b.n	80025d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002384:	2201      	movs	r2, #1
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	429a      	cmp	r2, r3
 800239e:	f040 8116 	bne.w	80025ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b12      	cmp	r3, #18
 80023a8:	d034      	beq.n	8002414 <HAL_GPIO_Init+0xa4>
 80023aa:	2b12      	cmp	r3, #18
 80023ac:	d80d      	bhi.n	80023ca <HAL_GPIO_Init+0x5a>
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d02b      	beq.n	800240a <HAL_GPIO_Init+0x9a>
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d804      	bhi.n	80023c0 <HAL_GPIO_Init+0x50>
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d031      	beq.n	800241e <HAL_GPIO_Init+0xae>
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d01c      	beq.n	80023f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023be:	e048      	b.n	8002452 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d043      	beq.n	800244c <HAL_GPIO_Init+0xdc>
 80023c4:	2b11      	cmp	r3, #17
 80023c6:	d01b      	beq.n	8002400 <HAL_GPIO_Init+0x90>
          break;
 80023c8:	e043      	b.n	8002452 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023ca:	4a89      	ldr	r2, [pc, #548]	; (80025f0 <HAL_GPIO_Init+0x280>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d026      	beq.n	800241e <HAL_GPIO_Init+0xae>
 80023d0:	4a87      	ldr	r2, [pc, #540]	; (80025f0 <HAL_GPIO_Init+0x280>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d806      	bhi.n	80023e4 <HAL_GPIO_Init+0x74>
 80023d6:	4a87      	ldr	r2, [pc, #540]	; (80025f4 <HAL_GPIO_Init+0x284>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d020      	beq.n	800241e <HAL_GPIO_Init+0xae>
 80023dc:	4a86      	ldr	r2, [pc, #536]	; (80025f8 <HAL_GPIO_Init+0x288>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01d      	beq.n	800241e <HAL_GPIO_Init+0xae>
          break;
 80023e2:	e036      	b.n	8002452 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023e4:	4a85      	ldr	r2, [pc, #532]	; (80025fc <HAL_GPIO_Init+0x28c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d019      	beq.n	800241e <HAL_GPIO_Init+0xae>
 80023ea:	4a85      	ldr	r2, [pc, #532]	; (8002600 <HAL_GPIO_Init+0x290>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d016      	beq.n	800241e <HAL_GPIO_Init+0xae>
 80023f0:	4a84      	ldr	r2, [pc, #528]	; (8002604 <HAL_GPIO_Init+0x294>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0xae>
          break;
 80023f6:	e02c      	b.n	8002452 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e028      	b.n	8002452 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	3304      	adds	r3, #4
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	e023      	b.n	8002452 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	3308      	adds	r3, #8
 8002410:	623b      	str	r3, [r7, #32]
          break;
 8002412:	e01e      	b.n	8002452 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	330c      	adds	r3, #12
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e019      	b.n	8002452 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002426:	2304      	movs	r3, #4
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e012      	b.n	8002452 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002434:	2308      	movs	r3, #8
 8002436:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	611a      	str	r2, [r3, #16]
          break;
 800243e:	e008      	b.n	8002452 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002440:	2308      	movs	r3, #8
 8002442:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	615a      	str	r2, [r3, #20]
          break;
 800244a:	e002      	b.n	8002452 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
          break;
 8002450:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2bff      	cmp	r3, #255	; 0xff
 8002456:	d801      	bhi.n	800245c <HAL_GPIO_Init+0xec>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	e001      	b.n	8002460 <HAL_GPIO_Init+0xf0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2bff      	cmp	r3, #255	; 0xff
 8002466:	d802      	bhi.n	800246e <HAL_GPIO_Init+0xfe>
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	e002      	b.n	8002474 <HAL_GPIO_Init+0x104>
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	3b08      	subs	r3, #8
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	210f      	movs	r1, #15
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	401a      	ands	r2, r3
 8002486:	6a39      	ldr	r1, [r7, #32]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	431a      	orrs	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8096 	beq.w	80025ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024a2:	4b59      	ldr	r3, [pc, #356]	; (8002608 <HAL_GPIO_Init+0x298>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	4a58      	ldr	r2, [pc, #352]	; (8002608 <HAL_GPIO_Init+0x298>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6193      	str	r3, [r2, #24]
 80024ae:	4b56      	ldr	r3, [pc, #344]	; (8002608 <HAL_GPIO_Init+0x298>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024ba:	4a54      	ldr	r2, [pc, #336]	; (800260c <HAL_GPIO_Init+0x29c>)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	220f      	movs	r2, #15
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	; (8002610 <HAL_GPIO_Init+0x2a0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x19e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4a      	ldr	r2, [pc, #296]	; (8002614 <HAL_GPIO_Init+0x2a4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x19a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a49      	ldr	r2, [pc, #292]	; (8002618 <HAL_GPIO_Init+0x2a8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x196>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a48      	ldr	r2, [pc, #288]	; (800261c <HAL_GPIO_Init+0x2ac>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x192>
 80024fe:	2303      	movs	r3, #3
 8002500:	e006      	b.n	8002510 <HAL_GPIO_Init+0x1a0>
 8002502:	2304      	movs	r3, #4
 8002504:	e004      	b.n	8002510 <HAL_GPIO_Init+0x1a0>
 8002506:	2302      	movs	r3, #2
 8002508:	e002      	b.n	8002510 <HAL_GPIO_Init+0x1a0>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_GPIO_Init+0x1a0>
 800250e:	2300      	movs	r3, #0
 8002510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002512:	f002 0203 	and.w	r2, r2, #3
 8002516:	0092      	lsls	r2, r2, #2
 8002518:	4093      	lsls	r3, r2
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002520:	493a      	ldr	r1, [pc, #232]	; (800260c <HAL_GPIO_Init+0x29c>)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	3302      	adds	r3, #2
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4938      	ldr	r1, [pc, #224]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
 8002546:	e006      	b.n	8002556 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	43db      	mvns	r3, r3
 8002550:	4933      	ldr	r1, [pc, #204]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 8002552:	4013      	ands	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002562:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	492e      	ldr	r1, [pc, #184]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
 800256e:	e006      	b.n	800257e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	43db      	mvns	r3, r3
 8002578:	4929      	ldr	r1, [pc, #164]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 800257a:	4013      	ands	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	4924      	ldr	r1, [pc, #144]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
 8002596:	e006      	b.n	80025a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	43db      	mvns	r3, r3
 80025a0:	491f      	ldr	r1, [pc, #124]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	491a      	ldr	r1, [pc, #104]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60cb      	str	r3, [r1, #12]
 80025be:	e006      	b.n	80025ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c0:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	4915      	ldr	r1, [pc, #84]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	3301      	adds	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f47f aed0 	bne.w	8002384 <HAL_GPIO_Init+0x14>
  }
}
 80025e4:	bf00      	nop
 80025e6:	372c      	adds	r7, #44	; 0x2c
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	10210000 	.word	0x10210000
 80025f4:	10110000 	.word	0x10110000
 80025f8:	10120000 	.word	0x10120000
 80025fc:	10310000 	.word	0x10310000
 8002600:	10320000 	.word	0x10320000
 8002604:	10220000 	.word	0x10220000
 8002608:	40021000 	.word	0x40021000
 800260c:	40010000 	.word	0x40010000
 8002610:	40010800 	.word	0x40010800
 8002614:	40010c00 	.word	0x40010c00
 8002618:	40011000 	.word	0x40011000
 800261c:	40011400 	.word	0x40011400
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002632:	e09a      	b.n	800276a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 808d 	beq.w	8002764 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800264a:	4a4e      	ldr	r2, [pc, #312]	; (8002784 <HAL_GPIO_DeInit+0x160>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3302      	adds	r3, #2
 8002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002656:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4013      	ands	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a46      	ldr	r2, [pc, #280]	; (8002788 <HAL_GPIO_DeInit+0x164>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <HAL_GPIO_DeInit+0x78>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a45      	ldr	r2, [pc, #276]	; (800278c <HAL_GPIO_DeInit+0x168>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00d      	beq.n	8002698 <HAL_GPIO_DeInit+0x74>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a44      	ldr	r2, [pc, #272]	; (8002790 <HAL_GPIO_DeInit+0x16c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <HAL_GPIO_DeInit+0x70>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a43      	ldr	r2, [pc, #268]	; (8002794 <HAL_GPIO_DeInit+0x170>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_GPIO_DeInit+0x6c>
 800268c:	2303      	movs	r3, #3
 800268e:	e006      	b.n	800269e <HAL_GPIO_DeInit+0x7a>
 8002690:	2304      	movs	r3, #4
 8002692:	e004      	b.n	800269e <HAL_GPIO_DeInit+0x7a>
 8002694:	2302      	movs	r3, #2
 8002696:	e002      	b.n	800269e <HAL_GPIO_DeInit+0x7a>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_GPIO_DeInit+0x7a>
 800269c:	2300      	movs	r3, #0
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	f002 0203 	and.w	r2, r2, #3
 80026a4:	0092      	lsls	r2, r2, #2
 80026a6:	4093      	lsls	r3, r2
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d132      	bne.n	8002714 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	220f      	movs	r2, #15
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80026be:	4a31      	ldr	r2, [pc, #196]	; (8002784 <HAL_GPIO_DeInit+0x160>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	43da      	mvns	r2, r3
 80026ce:	482d      	ldr	r0, [pc, #180]	; (8002784 <HAL_GPIO_DeInit+0x160>)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	400a      	ands	r2, r1
 80026d6:	3302      	adds	r3, #2
 80026d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80026dc:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_GPIO_DeInit+0x174>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	492c      	ldr	r1, [pc, #176]	; (8002798 <HAL_GPIO_DeInit+0x174>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80026ea:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_GPIO_DeInit+0x174>)
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4929      	ldr	r1, [pc, #164]	; (8002798 <HAL_GPIO_DeInit+0x174>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_GPIO_DeInit+0x174>)
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	43db      	mvns	r3, r3
 8002700:	4925      	ldr	r1, [pc, #148]	; (8002798 <HAL_GPIO_DeInit+0x174>)
 8002702:	4013      	ands	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_GPIO_DeInit+0x174>)
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	43db      	mvns	r3, r3
 800270e:	4922      	ldr	r1, [pc, #136]	; (8002798 <HAL_GPIO_DeInit+0x174>)
 8002710:	4013      	ands	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2bff      	cmp	r3, #255	; 0xff
 8002718:	d801      	bhi.n	800271e <HAL_GPIO_DeInit+0xfa>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	e001      	b.n	8002722 <HAL_GPIO_DeInit+0xfe>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2bff      	cmp	r3, #255	; 0xff
 8002728:	d802      	bhi.n	8002730 <HAL_GPIO_DeInit+0x10c>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	e002      	b.n	8002736 <HAL_GPIO_DeInit+0x112>
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3b08      	subs	r3, #8
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	210f      	movs	r1, #15
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	401a      	ands	r2, r3
 8002748:	2104      	movs	r1, #4
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	431a      	orrs	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	f47f af5e 	bne.w	8002634 <HAL_GPIO_DeInit+0x10>
  }
}
 8002778:	bf00      	nop
 800277a:	3724      	adds	r7, #36	; 0x24
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000
 8002788:	40010800 	.word	0x40010800
 800278c:	40010c00 	.word	0x40010c00
 8002790:	40011000 	.word	0x40011000
 8002794:	40011400 	.word	0x40011400
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e001      	b.n	80027be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	807b      	strh	r3, [r7, #2]
 80027d6:	4613      	mov	r3, r2
 80027d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027da:	787b      	ldrb	r3, [r7, #1]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e0:	887a      	ldrh	r2, [r7, #2]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027e6:	e003      	b.n	80027f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	041a      	lsls	r2, r3, #16
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	611a      	str	r2, [r3, #16]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800280c:	887a      	ldrh	r2, [r7, #2]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4013      	ands	r3, r2
 8002812:	041a      	lsls	r2, r3, #16
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43d9      	mvns	r1, r3
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	400b      	ands	r3, r1
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	611a      	str	r2, [r3, #16]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002832:	f7ff fa61 	bl	8001cf8 <HAL_GetTick>
 8002836:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002838:	4b45      	ldr	r3, [pc, #276]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a44      	ldr	r2, [pc, #272]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002846:	f7ff fa57 	bl	8001cf8 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e077      	b.n	8002948 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002858:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8002864:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <HAL_RCC_DeInit+0x124>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800286c:	4a38      	ldr	r2, [pc, #224]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800286e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002872:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002874:	f7ff fa40 	bl	8001cf8 <HAL_GetTick>
 8002878:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800287a:	4b35      	ldr	r3, [pc, #212]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800287c:	2200      	movs	r2, #0
 800287e:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002882:	f7ff fa39 	bl	8001cf8 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e057      	b.n	8002948 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1ee      	bne.n	8002882 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_RCC_DeInit+0x128>)
 80028a6:	4a2c      	ldr	r2, [pc, #176]	; (8002958 <HAL_RCC_DeInit+0x12c>)
 80028a8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_RCC_DeInit+0x130>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f9e0 	bl	8001c74 <HAL_InitTick>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e044      	b.n	8002948 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80028be:	f7ff fa1b 	bl	8001cf8 <HAL_GetTick>
 80028c2:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80028c4:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_RCC_DeInit+0x124>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_RCC_DeInit+0x124>)
 80028ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ce:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d2:	f7ff fa11 	bl	8001cf8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e031      	b.n	8002948 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCC_DeInit+0x124>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_RCC_DeInit+0x124>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80028f6:	f7ff f9ff 	bl	8001cf8 <HAL_GetTick>
 80028fa:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_RCC_DeInit+0x124>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a13      	ldr	r2, [pc, #76]	; (8002950 <HAL_RCC_DeInit+0x124>)
 8002902:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002906:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290a:	f7ff f9f5 	bl	8001cf8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	; 0x64
 8002916:	d901      	bls.n	800291c <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e015      	b.n	8002948 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800292e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002932:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_DeInit+0x124>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	4a05      	ldr	r2, [pc, #20]	; (8002950 <HAL_RCC_DeInit+0x124>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_RCC_DeInit+0x124>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	20000004 	.word	0x20000004
 8002958:	007a1200 	.word	0x007a1200
 800295c:	20000008 	.word	0x20000008

08002960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e26c      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8087 	beq.w	8002a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002980:	4b92      	ldr	r3, [pc, #584]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b04      	cmp	r3, #4
 800298a:	d00c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800298c:	4b8f      	ldr	r3, [pc, #572]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d112      	bne.n	80029be <HAL_RCC_OscConfig+0x5e>
 8002998:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d10b      	bne.n	80029be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a6:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d06c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x12c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d168      	bne.n	8002a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e246      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x76>
 80029c8:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a7f      	ldr	r2, [pc, #508]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e02e      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029de:	4b7b      	ldr	r3, [pc, #492]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7a      	ldr	r2, [pc, #488]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b78      	ldr	r3, [pc, #480]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a77      	ldr	r2, [pc, #476]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0xbc>
 8002a02:	4b72      	ldr	r3, [pc, #456]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a71      	ldr	r2, [pc, #452]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6e      	ldr	r2, [pc, #440]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 8002a1c:	4b6b      	ldr	r3, [pc, #428]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b68      	ldr	r3, [pc, #416]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a67      	ldr	r2, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f95c 	bl	8001cf8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7ff f958 	bl	8001cf8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1fa      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0xe4>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7ff f948 	bl	8001cf8 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7ff f944 	bl	8001cf8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1e6      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x10c>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d063      	beq.n	8002b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9a:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aa6:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11c      	bne.n	8002aec <HAL_RCC_OscConfig+0x18c>
 8002ab2:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	4b43      	ldr	r3, [pc, #268]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x176>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e1ba      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4939      	ldr	r1, [pc, #228]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	e03a      	b.n	8002b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af4:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_OscConfig+0x270>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7ff f8fd 	bl	8001cf8 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b02:	f7ff f8f9 	bl	8001cf8 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e19b      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4927      	ldr	r1, [pc, #156]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_RCC_OscConfig+0x270>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff f8dc 	bl	8001cf8 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b44:	f7ff f8d8 	bl	8001cf8 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e17a      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03a      	beq.n	8002be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d019      	beq.n	8002baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7ff f8bc 	bl	8001cf8 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7ff f8b8 	bl	8001cf8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e15a      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f000 faa8 	bl	80030f8 <RCC_Delay>
 8002ba8:	e01c      	b.n	8002be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7ff f8a2 	bl	8001cf8 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb6:	e00f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7ff f89e 	bl	8001cf8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d908      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e140      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	42420000 	.word	0x42420000
 8002bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	4b9e      	ldr	r3, [pc, #632]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e9      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80a6 	beq.w	8002d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b97      	ldr	r3, [pc, #604]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b94      	ldr	r3, [pc, #592]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4a93      	ldr	r2, [pc, #588]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	61d3      	str	r3, [r2, #28]
 8002c0e:	4b91      	ldr	r3, [pc, #580]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b8e      	ldr	r3, [pc, #568]	; (8002e58 <HAL_RCC_OscConfig+0x4f8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	; (8002e58 <HAL_RCC_OscConfig+0x4f8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a8a      	ldr	r2, [pc, #552]	; (8002e58 <HAL_RCC_OscConfig+0x4f8>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7ff f85f 	bl	8001cf8 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7ff f85b 	bl	8001cf8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0fd      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x312>
 8002c64:	4b7b      	ldr	r3, [pc, #492]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a7a      	ldr	r2, [pc, #488]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	e02d      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x334>
 8002c7a:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a75      	ldr	r2, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	4b73      	ldr	r3, [pc, #460]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a72      	ldr	r2, [pc, #456]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x356>
 8002c9c:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a6c      	ldr	r2, [pc, #432]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a69      	ldr	r2, [pc, #420]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002cb6:	4b67      	ldr	r3, [pc, #412]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a66      	ldr	r2, [pc, #408]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6213      	str	r3, [r2, #32]
 8002cc2:	4b64      	ldr	r3, [pc, #400]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a63      	ldr	r2, [pc, #396]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7ff f80f 	bl	8001cf8 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7ff f80b 	bl	8001cf8 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0ab      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x37e>
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fff9 	bl	8001cf8 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fff5 	bl	8001cf8 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e095      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4a47      	ldr	r2, [pc, #284]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8081 	beq.w	8002e4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d48:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d061      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d146      	bne.n	8002dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <HAL_RCC_OscConfig+0x4fc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe ffc9 	bl	8001cf8 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe ffc5 	bl	8001cf8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e067      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7c:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	492d      	ldr	r1, [pc, #180]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a19      	ldr	r1, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	430b      	orrs	r3, r1
 8002db6:	4927      	ldr	r1, [pc, #156]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x4fc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fe ff99 	bl	8001cf8 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fe ff95 	bl	8001cf8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e037      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x46a>
 8002de8:	e02f      	b.n	8002e4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <HAL_RCC_OscConfig+0x4fc>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe ff82 	bl	8001cf8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe ff7e 	bl	8001cf8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e020      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x498>
 8002e16:	e018      	b.n	8002e4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e013      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_OscConfig+0x4f4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	42420060 	.word	0x42420060

08002e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d0      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	4965      	ldr	r1, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d040      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d115      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e073      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06b      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4936      	ldr	r1, [pc, #216]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fed2 	bl	8001cf8 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7fe fece 	bl	8001cf8 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e053      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 020c 	and.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d1eb      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d210      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 0207 	bic.w	r2, r3, #7
 8002f96:	4922      	ldr	r1, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
 8003002:	fa21 f303 	lsr.w	r3, r1, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1cc>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1d0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fe30 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40022000 	.word	0x40022000
 8003024:	40021000 	.word	0x40021000
 8003028:	080075e0 	.word	0x080075e0
 800302c:	20000004 	.word	0x20000004
 8003030:	20000008 	.word	0x20000008

08003034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	b490      	push	{r4, r7}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800303c:	1d3c      	adds	r4, r7, #4
 800303e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800305e:	4b23      	ldr	r3, [pc, #140]	; (80030ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b04      	cmp	r3, #4
 800306c:	d002      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x40>
 800306e:	2b08      	cmp	r3, #8
 8003070:	d003      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x46>
 8003072:	e02d      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003076:	623b      	str	r3, [r7, #32]
      break;
 8003078:	e02d      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	0c9b      	lsrs	r3, r3, #18
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003086:	4413      	add	r3, r2
 8003088:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800308c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0c5b      	lsrs	r3, r3, #17
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030a6:	4413      	add	r3, r2
 80030a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	4a0f      	ldr	r2, [pc, #60]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030b2:	fb02 f203 	mul.w	r2, r2, r3
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
 80030be:	e004      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	623b      	str	r3, [r7, #32]
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030d2:	623b      	str	r3, [r7, #32]
      break;
 80030d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d6:	6a3b      	ldr	r3, [r7, #32]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3728      	adds	r7, #40	; 0x28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc90      	pop	{r4, r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	08007584 	.word	0x08007584
 80030e8:	08007594 	.word	0x08007594
 80030ec:	40021000 	.word	0x40021000
 80030f0:	007a1200 	.word	0x007a1200
 80030f4:	003d0900 	.word	0x003d0900

080030f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <RCC_Delay+0x34>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <RCC_Delay+0x38>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0a5b      	lsrs	r3, r3, #9
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003114:	bf00      	nop
  }
  while (Delay --);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1e5a      	subs	r2, r3, #1
 800311a:	60fa      	str	r2, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f9      	bne.n	8003114 <RCC_Delay+0x1c>
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000004 	.word	0x20000004
 8003130:	10624dd3 	.word	0x10624dd3

08003134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e076      	b.n	8003234 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003156:	d009      	beq.n	800316c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	61da      	str	r2, [r3, #28]
 800315e:	e005      	b.n	800316c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe fc6a 	bl	8001a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	0c1a      	lsrs	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f002 0204 	and.w	r2, r2, #4
 8003212:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003222:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_SPI_Transmit+0x22>
 800325a:	2302      	movs	r3, #2
 800325c:	e126      	b.n	80034ac <HAL_SPI_Transmit+0x270>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003266:	f7fe fd47 	bl	8001cf8 <HAL_GetTick>
 800326a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d002      	beq.n	8003282 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003280:	e10b      	b.n	800349a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_SPI_Transmit+0x52>
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003292:	e102      	b.n	800349a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2203      	movs	r2, #3
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032da:	d10f      	bne.n	80032fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d007      	beq.n	800331a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003318:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003322:	d14b      	bne.n	80033bc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_SPI_Transmit+0xf6>
 800332c:	8afb      	ldrh	r3, [r7, #22]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d13e      	bne.n	80033b0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	881a      	ldrh	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	1c9a      	adds	r2, r3, #2
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003356:	e02b      	b.n	80033b0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d112      	bne.n	800338c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	881a      	ldrh	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	1c9a      	adds	r2, r3, #2
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	86da      	strh	r2, [r3, #54]	; 0x36
 800338a:	e011      	b.n	80033b0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338c:	f7fe fcb4 	bl	8001cf8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d803      	bhi.n	80033a4 <HAL_SPI_Transmit+0x168>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d102      	bne.n	80033aa <HAL_SPI_Transmit+0x16e>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033ae:	e074      	b.n	800349a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ce      	bne.n	8003358 <HAL_SPI_Transmit+0x11c>
 80033ba:	e04c      	b.n	8003456 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_SPI_Transmit+0x18e>
 80033c4:	8afb      	ldrh	r3, [r7, #22]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d140      	bne.n	800344c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	7812      	ldrb	r2, [r2, #0]
 80033d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033f0:	e02c      	b.n	800344c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d113      	bne.n	8003428 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	7812      	ldrb	r2, [r2, #0]
 800340c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	86da      	strh	r2, [r3, #54]	; 0x36
 8003426:	e011      	b.n	800344c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003428:	f7fe fc66 	bl	8001cf8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d803      	bhi.n	8003440 <HAL_SPI_Transmit+0x204>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d102      	bne.n	8003446 <HAL_SPI_Transmit+0x20a>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	77fb      	strb	r3, [r7, #31]
          goto error;
 800344a:	e026      	b.n	800349a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1cd      	bne.n	80033f2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fa62 	bl	8003924 <SPI_EndRxTxTransaction>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e000      	b.n	800349a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003498:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	; 0x30
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034c2:	2301      	movs	r3, #1
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_SPI_TransmitReceive+0x26>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e18a      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x33c>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e2:	f7fe fc09 	bl	8001cf8 <HAL_GetTick>
 80034e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034f8:	887b      	ldrh	r3, [r7, #2]
 80034fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003500:	2b01      	cmp	r3, #1
 8003502:	d00f      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x70>
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800350a:	d107      	bne.n	800351c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <HAL_SPI_TransmitReceive+0x68>
 8003514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003518:	2b04      	cmp	r3, #4
 800351a:	d003      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800351c:	2302      	movs	r3, #2
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003522:	e15b      	b.n	80037dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_SPI_TransmitReceive+0x82>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_SPI_TransmitReceive+0x82>
 8003530:	887b      	ldrh	r3, [r7, #2]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800353c:	e14e      	b.n	80037dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b04      	cmp	r3, #4
 8003548:	d003      	beq.n	8003552 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2205      	movs	r2, #5
 800354e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	887a      	ldrh	r2, [r7, #2]
 8003562:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	887a      	ldrh	r2, [r7, #2]
 800357a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b40      	cmp	r3, #64	; 0x40
 8003594:	d007      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ae:	d178      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_SPI_TransmitReceive+0x10a>
 80035b8:	8b7b      	ldrh	r3, [r7, #26]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d166      	bne.n	800368c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	881a      	ldrh	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	1c9a      	adds	r2, r3, #2
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e2:	e053      	b.n	800368c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d11b      	bne.n	800362a <HAL_SPI_TransmitReceive+0x176>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d016      	beq.n	800362a <HAL_SPI_TransmitReceive+0x176>
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d113      	bne.n	800362a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	881a      	ldrh	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	1c9a      	adds	r2, r3, #2
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d119      	bne.n	800366c <HAL_SPI_TransmitReceive+0x1b8>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d014      	beq.n	800366c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	b292      	uxth	r2, r2
 800364e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	1c9a      	adds	r2, r3, #2
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003668:	2301      	movs	r3, #1
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800366c:	f7fe fb44 	bl	8001cf8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003678:	429a      	cmp	r2, r3
 800367a:	d807      	bhi.n	800368c <HAL_SPI_TransmitReceive+0x1d8>
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d003      	beq.n	800368c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800368a:	e0a7      	b.n	80037dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1a6      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x130>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1a1      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x130>
 80036a0:	e07c      	b.n	800379c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_SPI_TransmitReceive+0x1fc>
 80036aa:	8b7b      	ldrh	r3, [r7, #26]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d16b      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d6:	e057      	b.n	8003788 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d11c      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x26c>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d017      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x26c>
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d114      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	330c      	adds	r3, #12
 8003700:	7812      	ldrb	r2, [r2, #0]
 8003702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d119      	bne.n	8003762 <HAL_SPI_TransmitReceive+0x2ae>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d014      	beq.n	8003762 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800375e:	2301      	movs	r3, #1
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003762:	f7fe fac9 	bl	8001cf8 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800376e:	429a      	cmp	r2, r3
 8003770:	d803      	bhi.n	800377a <HAL_SPI_TransmitReceive+0x2c6>
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d102      	bne.n	8003780 <HAL_SPI_TransmitReceive+0x2cc>
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	2b00      	cmp	r3, #0
 800377e:	d103      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003786:	e029      	b.n	80037dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1a2      	bne.n	80036d8 <HAL_SPI_TransmitReceive+0x224>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d19d      	bne.n	80036d8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f8bf 	bl	8003924 <SPI_EndRxTxTransaction>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037b8:	e010      	b.n	80037dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	e000      	b.n	80037dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3730      	adds	r7, #48	; 0x30
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003806:	b2db      	uxtb	r3, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
	...

08003814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003824:	f7fe fa68 	bl	8001cf8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	4413      	add	r3, r2
 8003832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003834:	f7fe fa60 	bl	8001cf8 <HAL_GetTick>
 8003838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800383a:	4b39      	ldr	r3, [pc, #228]	; (8003920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	015b      	lsls	r3, r3, #5
 8003840:	0d1b      	lsrs	r3, r3, #20
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800384a:	e054      	b.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d050      	beq.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003854:	f7fe fa50 	bl	8001cf8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	429a      	cmp	r2, r3
 8003862:	d902      	bls.n	800386a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d13d      	bne.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003882:	d111      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388c:	d004      	beq.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003896:	d107      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b0:	d10f      	bne.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e017      	b.n	8003916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	429a      	cmp	r2, r3
 8003912:	d19b      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000004 	.word	0x20000004

08003924 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2200      	movs	r2, #0
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7ff ff6a 	bl	8003814 <SPI_WaitFlagStateUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e000      	b.n	8003958 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003964:	4904      	ldr	r1, [pc, #16]	; (8003978 <MX_FATFS_Init+0x18>)
 8003966:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_FATFS_Init+0x1c>)
 8003968:	f003 fd52 	bl	8007410 <FATFS_LinkDriver>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <MX_FATFS_Init+0x20>)
 8003972:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20002778 	.word	0x20002778
 800397c:	20000010 	.word	0x20000010
 8003980:	2000277c 	.word	0x2000277c

08003984 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003988:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800398a:	4618      	mov	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fc14 	bl	80011cc <SD_disk_initialize>
 80039a4:	4603      	mov	r3, r0
 80039a6:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status (pdrv);
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd fcef 	bl	80013a0 <SD_disk_status>
 80039c2:	4603      	mov	r3, r0
 80039c4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	4603      	mov	r3, r0
 80039dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 80039de:	7bf8      	ldrb	r0, [r7, #15]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	f7fd fcef 	bl	80013c8 <SD_disk_read>
 80039ea:	4603      	mov	r3, r0
 80039ec:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return  SD_disk_write (pdrv, buff, sector, count);
 8003a06:	7bf8      	ldrb	r0, [r7, #15]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	f7fd fd45 	bl	800149c <SD_disk_write>
 8003a12:	4603      	mov	r3, r0
 8003a14:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	603a      	str	r2, [r7, #0]
 8003a28:	71fb      	strb	r3, [r7, #7]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	79b9      	ldrb	r1, [r7, #6]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd fdb5 	bl	80015a4 <SD_disk_ioctl>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <disk_status+0x30>)
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	79fa      	ldrb	r2, [r7, #7]
 8003a60:	4905      	ldr	r1, [pc, #20]	; (8003a78 <disk_status+0x30>)
 8003a62:	440a      	add	r2, r1
 8003a64:	7a12      	ldrb	r2, [r2, #8]
 8003a66:	4610      	mov	r0, r2
 8003a68:	4798      	blx	r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000268 	.word	0x20000268

08003a7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <disk_initialize+0x48>)
 8003a8e:	5cd3      	ldrb	r3, [r2, r3]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <disk_initialize+0x48>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <disk_initialize+0x48>)
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	79fa      	ldrb	r2, [r7, #7]
 8003aaa:	4906      	ldr	r1, [pc, #24]	; (8003ac4 <disk_initialize+0x48>)
 8003aac:	440a      	add	r2, r1
 8003aae:	7a12      	ldrb	r2, [r2, #8]
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4798      	blx	r3
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000268 	.word	0x20000268

08003ac8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <disk_read+0x3c>)
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	689c      	ldr	r4, [r3, #8]
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <disk_read+0x3c>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	7a18      	ldrb	r0, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	47a0      	blx	r4
 8003af4:	4603      	mov	r3, r0
 8003af6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000268 	.word	0x20000268

08003b08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4603      	mov	r3, r0
 8003b16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <disk_write+0x3c>)
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68dc      	ldr	r4, [r3, #12]
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <disk_write+0x3c>)
 8003b28:	4413      	add	r3, r2
 8003b2a:	7a18      	ldrb	r0, [r3, #8]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	47a0      	blx	r4
 8003b34:	4603      	mov	r3, r0
 8003b36:	75fb      	strb	r3, [r7, #23]
  return res;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd90      	pop	{r4, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000268 	.word	0x20000268

08003b48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	603a      	str	r2, [r7, #0]
 8003b52:	71fb      	strb	r3, [r7, #7]
 8003b54:	460b      	mov	r3, r1
 8003b56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <disk_ioctl+0x38>)
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	79fa      	ldrb	r2, [r7, #7]
 8003b66:	4906      	ldr	r1, [pc, #24]	; (8003b80 <disk_ioctl+0x38>)
 8003b68:	440a      	add	r2, r1
 8003b6a:	7a10      	ldrb	r0, [r2, #8]
 8003b6c:	79b9      	ldrb	r1, [r7, #6]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4798      	blx	r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]
  return res;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000268 	.word	0x20000268

08003b84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003b98:	e007      	b.n	8003baa <mem_cpy+0x26>
		*d++ = *s++;
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	1c53      	adds	r3, r2, #1
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	6179      	str	r1, [r7, #20]
 8003ba6:	7812      	ldrb	r2, [r2, #0]
 8003ba8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f2      	bne.n	8003b9a <mem_cpy+0x16>
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr

08003bbe <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003bbe:	b480      	push	{r7}
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003bce:	e005      	b.n	8003bdc <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	617a      	str	r2, [r7, #20]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	1e5a      	subs	r2, r3, #1
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f4      	bne.n	8003bd0 <mem_set+0x12>
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	; 0x24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003c08:	bf00      	nop
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	1e5a      	subs	r2, r3, #1
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <mem_cmp+0x40>
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	61fa      	str	r2, [r7, #28]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	61ba      	str	r2, [r7, #24]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	1acb      	subs	r3, r1, r3
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ec      	beq.n	8003c0a <mem_cmp+0x1a>
	return r;
 8003c30:	697b      	ldr	r3, [r7, #20]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3724      	adds	r7, #36	; 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003c46:	e002      	b.n	8003c4e <chk_chr+0x12>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <chk_chr+0x26>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d1f2      	bne.n	8003c48 <chk_chr+0xc>
	return *str;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	781b      	ldrb	r3, [r3, #0]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	e03d      	b.n	8003d00 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8003c84:	4932      	ldr	r1, [pc, #200]	; (8003d50 <chk_lock+0xe0>)
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d02e      	beq.n	8003cf6 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003c98:	492d      	ldr	r1, [pc, #180]	; (8003d50 <chk_lock+0xe0>)
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d122      	bne.n	8003cfa <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8003cb4:	4926      	ldr	r1, [pc, #152]	; (8003d50 <chk_lock+0xe0>)
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ccc:	3308      	adds	r3, #8
 8003cce:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d112      	bne.n	8003cfa <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003cd4:	491e      	ldr	r1, [pc, #120]	; (8003d50 <chk_lock+0xe0>)
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	881a      	ldrh	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cec:	3306      	adds	r3, #6
 8003cee:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d102      	bne.n	8003cfa <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003cf4:	e007      	b.n	8003d06 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d9be      	bls.n	8003c84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d109      	bne.n	8003d20 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <chk_lock+0xa8>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d101      	bne.n	8003d1c <chk_lock+0xac>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e013      	b.n	8003d44 <chk_lock+0xd4>
 8003d1c:	2312      	movs	r3, #18
 8003d1e:	e011      	b.n	8003d44 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <chk_lock+0xce>
 8003d26:	490a      	ldr	r1, [pc, #40]	; (8003d50 <chk_lock+0xe0>)
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	330a      	adds	r3, #10
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3c:	d101      	bne.n	8003d42 <chk_lock+0xd2>
 8003d3e:	2310      	movs	r3, #16
 8003d40:	e000      	b.n	8003d44 <chk_lock+0xd4>
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000050 	.word	0x20000050

08003d54 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	e002      	b.n	8003d66 <enq_lock+0x12>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3301      	adds	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d809      	bhi.n	8003d80 <enq_lock+0x2c>
 8003d6c:	490a      	ldr	r1, [pc, #40]	; (8003d98 <enq_lock+0x44>)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ef      	bne.n	8003d60 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	bf14      	ite	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	2300      	moveq	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000050 	.word	0x20000050

08003d9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e030      	b.n	8003e0e <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8003dac:	495a      	ldr	r1, [pc, #360]	; (8003f18 <inc_lock+0x17c>)
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d11f      	bne.n	8003e08 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8003dc8:	4953      	ldr	r1, [pc, #332]	; (8003f18 <inc_lock+0x17c>)
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de0:	3308      	adds	r3, #8
 8003de2:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d10f      	bne.n	8003e08 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8003de8:	494b      	ldr	r1, [pc, #300]	; (8003f18 <inc_lock+0x17c>)
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	3308      	adds	r3, #8
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e00:	3306      	adds	r3, #6
 8003e02:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d006      	beq.n	8003e16 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d9cb      	bls.n	8003dac <inc_lock+0x10>
 8003e14:	e000      	b.n	8003e18 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8003e16:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d14a      	bne.n	8003eb4 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	e002      	b.n	8003e2a <inc_lock+0x8e>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d809      	bhi.n	8003e44 <inc_lock+0xa8>
 8003e30:	4939      	ldr	r1, [pc, #228]	; (8003f18 <inc_lock+0x17c>)
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ef      	bne.n	8003e24 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d101      	bne.n	8003e4e <inc_lock+0xb2>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e05f      	b.n	8003f0e <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	4830      	ldr	r0, [pc, #192]	; (8003f18 <inc_lock+0x17c>)
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4403      	add	r3, r0
 8003e64:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	4829      	ldr	r0, [pc, #164]	; (8003f18 <inc_lock+0x17c>)
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4403      	add	r3, r0
 8003e7e:	3304      	adds	r3, #4
 8003e80:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e88:	3306      	adds	r3, #6
 8003e8a:	8818      	ldrh	r0, [r3, #0]
 8003e8c:	4922      	ldr	r1, [pc, #136]	; (8003f18 <inc_lock+0x17c>)
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003ea0:	491d      	ldr	r1, [pc, #116]	; (8003f18 <inc_lock+0x17c>)
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	330a      	adds	r3, #10
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00c      	beq.n	8003ed4 <inc_lock+0x138>
 8003eba:	4917      	ldr	r1, [pc, #92]	; (8003f18 <inc_lock+0x17c>)
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	330a      	adds	r3, #10
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <inc_lock+0x138>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e01c      	b.n	8003f0e <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <inc_lock+0x156>
 8003eda:	490f      	ldr	r1, [pc, #60]	; (8003f18 <inc_lock+0x17c>)
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	330a      	adds	r3, #10
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	3301      	adds	r3, #1
 8003eee:	b299      	uxth	r1, r3
 8003ef0:	e001      	b.n	8003ef6 <inc_lock+0x15a>
 8003ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ef6:	4808      	ldr	r0, [pc, #32]	; (8003f18 <inc_lock+0x17c>)
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4613      	mov	r3, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4403      	add	r3, r0
 8003f04:	330a      	adds	r3, #10
 8003f06:	460a      	mov	r2, r1
 8003f08:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3301      	adds	r3, #1
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	20000050 	.word	0x20000050

08003f1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d82e      	bhi.n	8003f8e <dec_lock+0x72>
		n = Files[i].ctr;
 8003f30:	491b      	ldr	r1, [pc, #108]	; (8003fa0 <dec_lock+0x84>)
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	330a      	adds	r3, #10
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003f44:	89fb      	ldrh	r3, [r7, #14]
 8003f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4a:	d101      	bne.n	8003f50 <dec_lock+0x34>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003f50:	89fb      	ldrh	r3, [r7, #14]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <dec_lock+0x40>
 8003f56:	89fb      	ldrh	r3, [r7, #14]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003f5c:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <dec_lock+0x84>)
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	330a      	adds	r3, #10
 8003f6c:	89fa      	ldrh	r2, [r7, #14]
 8003f6e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <dec_lock+0x6c>
 8003f76:	490a      	ldr	r1, [pc, #40]	; (8003fa0 <dec_lock+0x84>)
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	737b      	strb	r3, [r7, #13]
 8003f8c:	e001      	b.n	8003f92 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003f8e:	2302      	movs	r3, #2
 8003f90:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003f92:	7b7b      	ldrb	r3, [r7, #13]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000050 	.word	0x20000050

08003fa4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e016      	b.n	8003fe0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003fb2:	490f      	ldr	r1, [pc, #60]	; (8003ff0 <clear_lock+0x4c>)
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d108      	bne.n	8003fda <clear_lock+0x36>
 8003fc8:	4909      	ldr	r1, [pc, #36]	; (8003ff0 <clear_lock+0x4c>)
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d9e5      	bls.n	8003fb2 <clear_lock+0xe>
	}
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	20000050 	.word	0x20000050

08003ff4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004006:	3304      	adds	r3, #4
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d047      	beq.n	800409e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004014:	330c      	adds	r3, #12
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004020:	3301      	adds	r3, #1
 8004022:	7818      	ldrb	r0, [r3, #0]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	2301      	movs	r3, #1
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	f7ff fd6d 	bl	8003b08 <disk_write>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <sync_window+0x46>
			res = FR_DISK_ERR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e031      	b.n	800409e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004040:	3304      	adds	r3, #4
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004058:	3318      	adds	r3, #24
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d21e      	bcs.n	800409e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004066:	3303      	adds	r3, #3
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e014      	b.n	8004098 <sync_window+0xa4>
					wsect += fs->fsize;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004074:	3318      	adds	r3, #24
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4413      	add	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004084:	3301      	adds	r3, #1
 8004086:	7818      	ldrb	r0, [r3, #0]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	2301      	movs	r3, #1
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	f7ff fd3b 	bl	8003b08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3b01      	subs	r3, #1
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d8e7      	bhi.n	800406e <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80040bc:	330c      	adds	r3, #12
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d01f      	beq.n	8004106 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ff94 	bl	8003ff4 <sync_window>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d117      	bne.n	8004106 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040dc:	3301      	adds	r3, #1
 80040de:	7818      	ldrb	r0, [r3, #0]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	2301      	movs	r3, #1
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	f7ff fcef 	bl	8003ac8 <disk_read>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004100:	330c      	adds	r3, #12
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff6b 	bl	8003ff4 <sync_window>
 800411e:	4603      	mov	r3, r0
 8004120:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 80bd 	bne.w	80042a4 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b03      	cmp	r3, #3
 8004134:	f040 80a7 	bne.w	8004286 <sync_fs+0x176>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413e:	3305      	adds	r3, #5
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	f040 809f 	bne.w	8004286 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004150:	330a      	adds	r3, #10
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	2100      	movs	r1, #0
 8004158:	f7ff fd31 	bl	8003bbe <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2255      	movs	r2, #85	; 0x55
 8004160:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	22aa      	movs	r2, #170	; 0xaa
 8004168:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2252      	movs	r2, #82	; 0x52
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2252      	movs	r2, #82	; 0x52
 8004176:	705a      	strb	r2, [r3, #1]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2261      	movs	r2, #97	; 0x61
 800417c:	709a      	strb	r2, [r3, #2]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2241      	movs	r2, #65	; 0x41
 8004182:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2272      	movs	r2, #114	; 0x72
 8004188:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2272      	movs	r2, #114	; 0x72
 8004190:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2241      	movs	r2, #65	; 0x41
 8004198:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2261      	movs	r2, #97	; 0x61
 80041a0:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041aa:	3310      	adds	r3, #16
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041bc:	3310      	adds	r3, #16
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d4:	3310      	adds	r3, #16
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e8:	3310      	adds	r3, #16
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0e1b      	lsrs	r3, r3, #24
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fc:	330c      	adds	r3, #12
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420e:	330c      	adds	r3, #12
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	b29b      	uxth	r3, r3
 8004218:	b2da      	uxtb	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	330c      	adds	r3, #12
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	0c1b      	lsrs	r3, r3, #16
 800422c:	b2da      	uxtb	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423a:	330c      	adds	r3, #12
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	0e1b      	lsrs	r3, r3, #24
 8004240:	b2da      	uxtb	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	331c      	adds	r3, #28
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800425a:	330c      	adds	r3, #12
 800425c:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004264:	3301      	adds	r3, #1
 8004266:	7818      	ldrb	r0, [r3, #0]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004270:	330c      	adds	r3, #12
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2301      	movs	r3, #1
 8004276:	f7ff fc47 	bl	8003b08 <disk_write>
			fs->fsi_flag = 0;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004280:	3305      	adds	r3, #5
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428c:	3301      	adds	r3, #1
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fc57 	bl	8003b48 <disk_ioctl>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <sync_fs+0x194>
			res = FR_DISK_ERR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	3b02      	subs	r3, #2
 80042bc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c4:	3314      	adds	r3, #20
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3b02      	subs	r3, #2
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d301      	bcc.n	80042d4 <clust2sect+0x26>
 80042d0:	2300      	movs	r3, #0
 80042d2:	e00e      	b.n	80042f2 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	3302      	adds	r3, #2
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	fb03 f202 	mul.w	r2, r3, r2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80042ec:	3308      	adds	r3, #8
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4413      	add	r3, r2
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d907      	bls.n	800431c <get_fat+0x20>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	3314      	adds	r3, #20
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d302      	bcc.n	8004322 <get_fat+0x26>
		val = 1;	/* Internal error */
 800431c:	2301      	movs	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e0e9      	b.n	80044f6 <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d068      	beq.n	8004406 <get_fat+0x10a>
 8004334:	2b03      	cmp	r3, #3
 8004336:	f000 8099 	beq.w	800446c <get_fat+0x170>
 800433a:	2b01      	cmp	r3, #1
 800433c:	f040 80d1 	bne.w	80044e2 <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435c:	330a      	adds	r3, #10
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	4619      	mov	r1, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	fbb3 f3f1 	udiv	r3, r3, r1
 8004368:	4413      	add	r3, r2
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fe9b 	bl	80040a8 <move_window>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 80b7 	bne.w	80044e8 <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	60fa      	str	r2, [r7, #12]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004386:	320a      	adds	r2, #10
 8004388:	8812      	ldrh	r2, [r2, #0]
 800438a:	fbb3 f1f2 	udiv	r1, r3, r2
 800438e:	fb02 f201 	mul.w	r2, r2, r1
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	5cd3      	ldrb	r3, [r2, r3]
 8004398:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a8:	330a      	adds	r3, #10
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	4619      	mov	r1, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80043b4:	4413      	add	r3, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fe75 	bl	80040a8 <move_window>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f040 8093 	bne.w	80044ec <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043cc:	330a      	adds	r3, #10
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80043d8:	fb02 f201 	mul.w	r2, r2, r1
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <get_fat+0x100>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	e002      	b.n	8004402 <get_fat+0x106>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004402:	617b      	str	r3, [r7, #20]
			break;
 8004404:	e077      	b.n	80044f6 <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004414:	330a      	adds	r3, #10
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	b29b      	uxth	r3, r3
 800441c:	4619      	mov	r1, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	fbb3 f3f1 	udiv	r3, r3, r1
 8004424:	4413      	add	r3, r2
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff fe3d 	bl	80040a8 <move_window>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d15d      	bne.n	80044f0 <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	005a      	lsls	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443e:	330a      	adds	r3, #10
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	fbb2 f1f3 	udiv	r1, r2, r3
 8004446:	fb03 f301 	mul.w	r3, r3, r1
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3301      	adds	r3, #1
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	b21a      	sxth	r2, r3
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	b21b      	sxth	r3, r3
 8004462:	4313      	orrs	r3, r2
 8004464:	b21b      	sxth	r3, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	617b      	str	r3, [r7, #20]
			break;
 800446a:	e044      	b.n	80044f6 <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447a:	330a      	adds	r3, #10
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	b29b      	uxth	r3, r3
 8004482:	4619      	mov	r1, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	fbb3 f3f1 	udiv	r3, r3, r1
 800448a:	4413      	add	r3, r2
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff fe0a 	bl	80040a8 <move_window>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d12c      	bne.n	80044f4 <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	009a      	lsls	r2, r3, #2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a4:	330a      	adds	r3, #10
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80044ac:	fb03 f301 	mul.w	r3, r3, r1
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	3303      	adds	r3, #3
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	061a      	lsls	r2, r3, #24
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3302      	adds	r3, #2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	4313      	orrs	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	3201      	adds	r2, #1
 80044ce:	7812      	ldrb	r2, [r2, #0]
 80044d0:	0212      	lsls	r2, r2, #8
 80044d2:	4313      	orrs	r3, r2
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	4313      	orrs	r3, r2
 80044da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044de:	617b      	str	r3, [r7, #20]
			break;
 80044e0:	e009      	b.n	80044f6 <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 80044e2:	2301      	movs	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e006      	b.n	80044f6 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044e8:	bf00      	nop
 80044ea:	e004      	b.n	80044f6 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044ec:	bf00      	nop
 80044ee:	e002      	b.n	80044f6 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80044f0:	bf00      	nop
 80044f2:	e000      	b.n	80044f6 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80044f4:	bf00      	nop
		}
	}

	return val;
 80044f6:	697b      	ldr	r3, [r7, #20]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d907      	bls.n	8004522 <put_fat+0x22>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004518:	3314      	adds	r3, #20
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <put_fat+0x28>
		res = FR_INT_ERR;
 8004522:	2302      	movs	r3, #2
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e143      	b.n	80047b0 <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b02      	cmp	r3, #2
 8004532:	f000 809a 	beq.w	800466a <put_fat+0x16a>
 8004536:	2b03      	cmp	r3, #3
 8004538:	f000 80d3 	beq.w	80046e2 <put_fat+0x1e2>
 800453c:	2b01      	cmp	r3, #1
 800453e:	f040 812d 	bne.w	800479c <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4413      	add	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455e:	330a      	adds	r3, #10
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	4619      	mov	r1, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	fbb3 f3f1 	udiv	r3, r3, r1
 800456a:	4413      	add	r3, r2
 800456c:	4619      	mov	r1, r3
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff fd9a 	bl	80040a8 <move_window>
 8004574:	4603      	mov	r3, r0
 8004576:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004578:	7ffb      	ldrb	r3, [r7, #31]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f040 8111 	bne.w	80047a2 <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	617a      	str	r2, [r7, #20]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800458c:	320a      	adds	r2, #10
 800458e:	8812      	ldrh	r2, [r2, #0]
 8004590:	fbb3 f1f2 	udiv	r1, r3, r2
 8004594:	fb02 f201 	mul.w	r2, r2, r1
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4413      	add	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00d      	beq.n	80045c6 <put_fat+0xc6>
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	b25b      	sxtb	r3, r3
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	b25a      	sxtb	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	4313      	orrs	r3, r2
 80045c0:	b25b      	sxtb	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	e001      	b.n	80045ca <put_fat+0xca>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	3304      	adds	r3, #4
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e8:	330a      	adds	r3, #10
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	4619      	mov	r1, r3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80045f4:	4413      	add	r3, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff fd55 	bl	80040a8 <move_window>
 80045fe:	4603      	mov	r3, r0
 8004600:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004602:	7ffb      	ldrb	r3, [r7, #31]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f040 80ce 	bne.w	80047a6 <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004610:	330a      	adds	r3, #10
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	fbb3 f1f2 	udiv	r1, r3, r2
 800461c:	fb02 f201 	mul.w	r2, r2, r1
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <put_fat+0x13a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e00e      	b.n	8004658 <put_fat+0x158>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	b25b      	sxtb	r3, r3
 8004640:	f023 030f 	bic.w	r3, r3, #15
 8004644:	b25a      	sxtb	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	b25b      	sxtb	r3, r3
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	b25b      	sxtb	r3, r3
 8004652:	4313      	orrs	r3, r2
 8004654:	b25b      	sxtb	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004662:	3304      	adds	r3, #4
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]
			break;
 8004668:	e0a2      	b.n	80047b0 <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004678:	330a      	adds	r3, #10
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	b29b      	uxth	r3, r3
 8004680:	4619      	mov	r1, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	fbb3 f3f1 	udiv	r3, r3, r1
 8004688:	4413      	add	r3, r2
 800468a:	4619      	mov	r1, r3
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff fd0b 	bl	80040a8 <move_window>
 8004692:	4603      	mov	r3, r0
 8004694:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004696:	7ffb      	ldrb	r3, [r7, #31]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f040 8086 	bne.w	80047aa <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	005a      	lsls	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a8:	330a      	adds	r3, #10
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80046b0:	fb03 f301 	mul.w	r3, r3, r1
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	3301      	adds	r3, #1
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046da:	3304      	adds	r3, #4
 80046dc:	2201      	movs	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
			break;
 80046e0:	e066      	b.n	80047b0 <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f0:	330a      	adds	r3, #10
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	4619      	mov	r1, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004700:	4413      	add	r3, r2
 8004702:	4619      	mov	r1, r3
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff fccf 	bl	80040a8 <move_window>
 800470a:	4603      	mov	r3, r0
 800470c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800470e:	7ffb      	ldrb	r3, [r7, #31]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d14c      	bne.n	80047ae <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	009a      	lsls	r2, r3, #2
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471e:	330a      	adds	r3, #10
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	fbb2 f1f3 	udiv	r1, r2, r3
 8004726:	fb03 f301 	mul.w	r3, r3, r1
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	3303      	adds	r3, #3
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	061a      	lsls	r2, r3, #24
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	3302      	adds	r3, #2
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	4313      	orrs	r3, r2
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	3201      	adds	r2, #1
 8004748:	7812      	ldrb	r2, [r2, #0]
 800474a:	0212      	lsls	r2, r2, #8
 800474c:	4313      	orrs	r3, r2
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4313      	orrs	r3, r2
 800475c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	b29b      	uxth	r3, r3
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	b29a      	uxth	r2, r3
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3301      	adds	r3, #1
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0c1a      	lsrs	r2, r3, #16
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	3302      	adds	r3, #2
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0e1a      	lsrs	r2, r3, #24
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	3303      	adds	r3, #3
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004794:	3304      	adds	r3, #4
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
			break;
 800479a:	e009      	b.n	80047b0 <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 800479c:	2302      	movs	r3, #2
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e006      	b.n	80047b0 <put_fat+0x2b0>
			if (res != FR_OK) break;
 80047a2:	bf00      	nop
 80047a4:	e004      	b.n	80047b0 <put_fat+0x2b0>
			if (res != FR_OK) break;
 80047a6:	bf00      	nop
 80047a8:	e002      	b.n	80047b0 <put_fat+0x2b0>
			if (res != FR_OK) break;
 80047aa:	bf00      	nop
 80047ac:	e000      	b.n	80047b0 <put_fat+0x2b0>
			if (res != FR_OK) break;
 80047ae:	bf00      	nop
		}
	}

	return res;
 80047b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d907      	bls.n	80047da <remove_chain+0x20>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d0:	3314      	adds	r3, #20
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <remove_chain+0x26>
		res = FR_INT_ERR;
 80047da:	2302      	movs	r3, #2
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e04f      	b.n	8004880 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80047e4:	e040      	b.n	8004868 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff fd87 	bl	80042fc <get_fat>
 80047ee:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d041      	beq.n	800487a <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d102      	bne.n	8004802 <remove_chain+0x48>
 80047fc:	2302      	movs	r3, #2
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	e03e      	b.n	8004880 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d102      	bne.n	8004810 <remove_chain+0x56>
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	e037      	b.n	8004880 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004810:	2200      	movs	r2, #0
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff fe73 	bl	8004500 <put_fat>
 800481a:	4603      	mov	r3, r0
 800481c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d12c      	bne.n	800487e <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482a:	3310      	adds	r3, #16
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d017      	beq.n	8004864 <remove_chain+0xaa>
				fs->free_clust++;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483a:	3310      	adds	r3, #16
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004846:	3310      	adds	r3, #16
 8004848:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004850:	3305      	adds	r3, #5
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	b2da      	uxtb	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004860:	3305      	adds	r3, #5
 8004862:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486e:	3314      	adds	r3, #20
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d3b6      	bcc.n	80047e6 <remove_chain+0x2c>
 8004878:	e002      	b.n	8004880 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <remove_chain+0xc6>
			if (res != FR_OK) break;
 800487e:	bf00      	nop
		}
	}

	return res;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d113      	bne.n	80048c2 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a0:	330c      	adds	r3, #12
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <create_chain+0x32>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b2:	3314      	adds	r3, #20
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d31e      	bcc.n	80048fa <create_chain+0x70>
 80048bc:	2301      	movs	r3, #1
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	e01b      	b.n	80048fa <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fd19 	bl	80042fc <get_fat>
 80048ca:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d801      	bhi.n	80048d6 <create_chain+0x4c>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e086      	b.n	80049e4 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d101      	bne.n	80048e2 <create_chain+0x58>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	e080      	b.n	80049e4 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	3314      	adds	r3, #20
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d201      	bcs.n	80048f6 <create_chain+0x6c>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	e076      	b.n	80049e4 <create_chain+0x15a>
		scl = clst;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	3301      	adds	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490a:	3314      	adds	r3, #20
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	429a      	cmp	r2, r3
 8004912:	d307      	bcc.n	8004924 <create_chain+0x9a>
			ncl = 2;
 8004914:	2302      	movs	r3, #2
 8004916:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	429a      	cmp	r2, r3
 800491e:	d901      	bls.n	8004924 <create_chain+0x9a>
 8004920:	2300      	movs	r3, #0
 8004922:	e05f      	b.n	80049e4 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004924:	6979      	ldr	r1, [r7, #20]
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fce8 	bl	80042fc <get_fat>
 800492c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00e      	beq.n	8004952 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d002      	beq.n	8004942 <create_chain+0xb8>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <create_chain+0xbc>
			return cs;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	e04e      	b.n	80049e4 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	d1d7      	bne.n	80048fe <create_chain+0x74>
 800494e:	2300      	movs	r3, #0
 8004950:	e048      	b.n	80049e4 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8004952:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004954:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004958:	6979      	ldr	r1, [r7, #20]
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fdd0 	bl	8004500 <put_fat>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <create_chain+0xf4>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d006      	beq.n	800497e <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	6839      	ldr	r1, [r7, #0]
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff fdc3 	bl	8004500 <put_fat>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d126      	bne.n	80049d2 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	330c      	adds	r3, #12
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004996:	3310      	adds	r3, #16
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d020      	beq.n	80049e2 <create_chain+0x158>
			fs->free_clust--;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a6:	3310      	adds	r3, #16
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b2:	3310      	adds	r3, #16
 80049b4:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049bc:	3305      	adds	r3, #5
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049cc:	3305      	adds	r3, #5
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e007      	b.n	80049e2 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <create_chain+0x154>
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	e000      	b.n	80049e0 <create_chain+0x156>
 80049de:	2301      	movs	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80049e2:	697b      	ldr	r3, [r7, #20]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80049fc:	3304      	adds	r3, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3304      	adds	r3, #4
 8004a02:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a10:	330a      	adds	r3, #10
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a28:	3302      	adds	r3, #2
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1d1a      	adds	r2, r3, #4
 8004a36:	613a      	str	r2, [r7, #16]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <clmt_clust+0x5a>
 8004a42:	2300      	movs	r3, #0
 8004a44:	e010      	b.n	8004a68 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d307      	bcc.n	8004a5e <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004a5c:	e7e9      	b.n	8004a32 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8004a5e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4413      	add	r3, r2
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a86:	3306      	adds	r3, #6
 8004a88:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a90:	3308      	adds	r3, #8
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d00a      	beq.n	8004ab2 <dir_sdi+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa8:	3314      	adds	r3, #20
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d301      	bcc.n	8004ab6 <dir_sdi+0x44>
		return FR_INT_ERR;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0b4      	b.n	8004c20 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d111      	bne.n	8004ae0 <dir_sdi+0x6e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d108      	bne.n	8004ae0 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004ada:	3304      	adds	r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d117      	bne.n	8004b16 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af2:	3308      	adds	r3, #8
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d301      	bcc.n	8004b02 <dir_sdi+0x90>
			return FR_INT_ERR;
 8004afe:	2302      	movs	r3, #2
 8004b00:	e08e      	b.n	8004c20 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004b0e:	3304      	adds	r3, #4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	e046      	b.n	8004ba4 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b22:	330a      	adds	r3, #10
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b38:	3302      	adds	r3, #2
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	fb03 f302 	mul.w	r3, r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004b42:	e022      	b.n	8004b8a <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6979      	ldr	r1, [r7, #20]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fbd4 	bl	80042fc <get_fat>
 8004b54:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d101      	bne.n	8004b62 <dir_sdi+0xf0>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e05e      	b.n	8004c20 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d90a      	bls.n	8004b7e <dir_sdi+0x10c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b74:	3314      	adds	r3, #20
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d301      	bcc.n	8004b82 <dir_sdi+0x110>
				return FR_INT_ERR;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e04e      	b.n	8004c20 <dir_sdi+0x1ae>
			idx -= ic;
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d2d8      	bcs.n	8004b44 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6979      	ldr	r1, [r7, #20]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fb86 	bl	80042ae <clust2sect>
 8004ba2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004baa:	330c      	adds	r3, #12
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <dir_sdi+0x148>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e032      	b.n	8004c20 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc6:	330a      	adds	r3, #10
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	441a      	add	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	3310      	adds	r3, #16
 8004be2:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfa:	330a      	adds	r3, #10
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c0a:	fb02 f201 	mul.w	r2, r2, r1
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	015b      	lsls	r3, r3, #5
 8004c12:	18c2      	adds	r2, r0, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c38:	3306      	adds	r3, #6
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d006      	beq.n	8004c56 <dir_next+0x2e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4e:	3310      	adds	r3, #16
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <dir_next+0x32>
		return FR_NO_FILE;
 8004c56:	2304      	movs	r3, #4
 8004c58:	e144      	b.n	8004ee4 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c66:	330a      	adds	r3, #10
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c76:	fb02 f201 	mul.w	r2, r2, r1
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 810c 	bne.w	8004e9a <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c88:	3310      	adds	r3, #16
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c94:	3310      	adds	r3, #16
 8004c96:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10e      	bne.n	8004cc4 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f0c0 80ed 	bcc.w	8004e9a <dir_next+0x272>
				return FR_NO_FILE;
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	e10f      	b.n	8004ee4 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd0:	330a      	adds	r3, #10
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cec:	3302      	adds	r3, #2
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f040 80d0 	bne.w	8004e9a <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d08:	330c      	adds	r3, #12
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f7ff faf4 	bl	80042fc <get_fat>
 8004d14:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d801      	bhi.n	8004d20 <dir_next+0xf8>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e0e1      	b.n	8004ee4 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d101      	bne.n	8004d2c <dir_next+0x104>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0db      	b.n	8004ee4 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d38:	3314      	adds	r3, #20
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	f0c0 8097 	bcc.w	8004e72 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <dir_next+0x126>
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	e0ca      	b.n	8004ee4 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f7ff fd91 	bl	800488a <create_chain>
 8004d68:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <dir_next+0x14c>
 8004d70:	2307      	movs	r3, #7
 8004d72:	e0b7      	b.n	8004ee4 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <dir_next+0x156>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e0b2      	b.n	8004ee4 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d101      	bne.n	8004d8a <dir_next+0x162>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e0ac      	b.n	8004ee4 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff f92e 	bl	8003ff4 <sync_window>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <dir_next+0x17a>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0a0      	b.n	8004ee4 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db8:	330a      	adds	r3, #10
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	f7fe fefd 	bl	8003bbe <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd2:	681c      	ldr	r4, [r3, #0]
 8004dd4:	6979      	ldr	r1, [r7, #20]
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f7ff fa69 	bl	80042ae <clust2sect>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8004de2:	330c      	adds	r3, #12
 8004de4:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	e024      	b.n	8004e36 <dir_next+0x20e>
						dp->fs->wflag = 1;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df8:	3304      	adds	r3, #4
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff f8f4 	bl	8003ff4 <sync_window>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <dir_next+0x1ee>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e066      	b.n	8004ee4 <dir_next+0x2bc>
						dp->fs->winsect++;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004e22:	330c      	adds	r3, #12
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1c59      	adds	r1, r3, #1
 8004e28:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	3301      	adds	r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e42:	3302      	adds	r3, #2
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d3ce      	bcc.n	8004dec <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	1a8a      	subs	r2, r1, r2
 8004e6a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e6e:	330c      	adds	r3, #12
 8004e70:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e78:	330c      	adds	r3, #12
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fa10 	bl	80042ae <clust2sect>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e96:	3310      	adds	r3, #16
 8004e98:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea4:	3306      	adds	r3, #6
 8004ea6:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ebe:	330a      	adds	r3, #10
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ece:	fb02 f201 	mul.w	r2, r2, r1
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	015b      	lsls	r3, r3, #5
 8004ed6:	18c2      	adds	r2, r0, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ede:	3314      	adds	r3, #20
 8004ee0:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd90      	pop	{r4, r7, pc}

08004eec <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fdba 	bl	8004a72 <dir_sdi>
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d138      	bne.n	8004f7a <dir_alloc+0x8e>
		n = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f1a:	3310      	adds	r3, #16
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f7ff f8c1 	bl	80040a8 <move_window>
 8004f26:	4603      	mov	r3, r0
 8004f28:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d123      	bne.n	8004f78 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f36:	3314      	adds	r3, #20
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2be5      	cmp	r3, #229	; 0xe5
 8004f3e:	d007      	beq.n	8004f50 <dir_alloc+0x64>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f46:	3314      	adds	r3, #20
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d107      	bne.n	8004f60 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d102      	bne.n	8004f64 <dir_alloc+0x78>
 8004f5e:	e00c      	b.n	8004f7a <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f60:	2300      	movs	r3, #0
 8004f62:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004f64:	2101      	movs	r1, #1
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff fe5e 	bl	8004c28 <dir_next>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ca      	beq.n	8004f0c <dir_alloc+0x20>
 8004f76:	e000      	b.n	8004f7a <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8004f78:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d101      	bne.n	8004f84 <dir_alloc+0x98>
 8004f80:	2307      	movs	r3, #7
 8004f82:	73fb      	strb	r3, [r7, #15]
	return res;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	331b      	adds	r3, #27
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	b21a      	sxth	r2, r3
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	331a      	adds	r3, #26
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b21b      	sxth	r3, r3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d10f      	bne.n	8004fde <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	3315      	adds	r3, #21
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	b21a      	sxth	r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	3314      	adds	r3, #20
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	b21b      	sxth	r3, r3
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	b21b      	sxth	r3, r3
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

	return cl;
 8004fde:	68fb      	ldr	r3, [r7, #12]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	331a      	adds	r3, #26
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	331b      	adds	r3, #27
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	0c1a      	lsrs	r2, r3, #16
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3314      	adds	r3, #20
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	b29b      	uxth	r3, r3
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	b29a      	uxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3315      	adds	r3, #21
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr
	...

08005038 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	4613      	mov	r3, r2
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	2301      	movs	r3, #1
 800505e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005060:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <cmp_lfn+0xd8>)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	3301      	adds	r3, #1
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	4413      	add	r3, r2
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	b21a      	sxth	r2, r3
 8005074:	4926      	ldr	r1, [pc, #152]	; (8005110 <cmp_lfn+0xd8>)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	440b      	add	r3, r1
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	4619      	mov	r1, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	440b      	add	r3, r1
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b21b      	sxth	r3, r3
 8005086:	4313      	orrs	r3, r2
 8005088:	b21b      	sxth	r3, r3
 800508a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800508c:	89fb      	ldrh	r3, [r7, #14]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d019      	beq.n	80050c6 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005092:	89bb      	ldrh	r3, [r7, #12]
 8005094:	4618      	mov	r0, r3
 8005096:	f002 fa05 	bl	80074a4 <ff_wtoupper>
 800509a:	4603      	mov	r3, r0
 800509c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2bfe      	cmp	r3, #254	; 0xfe
 80050a2:	d80e      	bhi.n	80050c2 <cmp_lfn+0x8a>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	617a      	str	r2, [r7, #20]
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f002 f9f6 	bl	80074a4 <ff_wtoupper>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461a      	mov	r2, r3
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	4293      	cmp	r3, r2
 80050c0:	d008      	beq.n	80050d4 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80050c2:	2300      	movs	r3, #0
 80050c4:	e01f      	b.n	8005106 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80050c6:	89bb      	ldrh	r3, [r7, #12]
 80050c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d001      	beq.n	80050d4 <cmp_lfn+0x9c>
 80050d0:	2300      	movs	r3, #0
 80050d2:	e018      	b.n	8005106 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	3301      	adds	r3, #1
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	d9bf      	bls.n	8005060 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <cmp_lfn+0xcc>
 80050ec:	89fb      	ldrh	r3, [r7, #14]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <cmp_lfn+0xcc>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <cmp_lfn+0xcc>
		return 0;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8005104:	2301      	movs	r3, #1
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	08007670 	.word	0x08007670

08005114 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4611      	mov	r1, r2
 8005120:	461a      	mov	r2, r3
 8005122:	460b      	mov	r3, r1
 8005124:	71fb      	strb	r3, [r7, #7]
 8005126:	4613      	mov	r3, r2
 8005128:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	330d      	adds	r3, #13
 800512e:	79ba      	ldrb	r2, [r7, #6]
 8005130:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	330b      	adds	r3, #11
 8005136:	220f      	movs	r2, #15
 8005138:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	330c      	adds	r3, #12
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	331a      	adds	r3, #26
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	331b      	adds	r3, #27
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	1e5a      	subs	r2, r3, #1
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	82fb      	strh	r3, [r7, #22]
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800516a:	8afb      	ldrh	r3, [r7, #22]
 800516c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <fit_lfn+0x70>
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	61fa      	str	r2, [r7, #28]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005184:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <fit_lfn+0xe4>)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	4413      	add	r3, r2
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	4413      	add	r3, r2
 8005192:	8afa      	ldrh	r2, [r7, #22]
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	8afb      	ldrh	r3, [r7, #22]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	b299      	uxth	r1, r3
 800519e:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <fit_lfn+0xe4>)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	4413      	add	r3, r2
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	4413      	add	r3, r2
 80051ac:	b2ca      	uxtb	r2, r1
 80051ae:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80051b0:	8afb      	ldrh	r3, [r7, #22]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <fit_lfn+0xa8>
 80051b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	3301      	adds	r3, #1
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b0c      	cmp	r3, #12
 80051c6:	d9d0      	bls.n	800516a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80051c8:	8afb      	ldrh	r3, [r7, #22]
 80051ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d006      	beq.n	80051e0 <fit_lfn+0xcc>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <fit_lfn+0xd4>
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	79fa      	ldrb	r2, [r7, #7]
 80051ec:	701a      	strb	r2, [r3, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3724      	adds	r7, #36	; 0x24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr
 80051f8:	08007670 	.word	0x08007670

080051fc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	; 0x30
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800520a:	220b      	movs	r2, #11
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f7fe fcb8 	bl	8003b84 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b05      	cmp	r3, #5
 8005218:	d92b      	bls.n	8005272 <gen_numname+0x76>
		sr = seq;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800521e:	e022      	b.n	8005266 <gen_numname+0x6a>
			wc = *lfn++;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	1c9a      	adds	r2, r3, #2
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800522a:	2300      	movs	r3, #0
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
 800522e:	e017      	b.n	8005260 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	005a      	lsls	r2, r3, #1
 8005234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800523e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <gen_numname+0x5e>
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005254:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005258:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	3301      	adds	r3, #1
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d9e4      	bls.n	8005230 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1d8      	bne.n	8005220 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005272:	2307      	movs	r3, #7
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	b2db      	uxtb	r3, r3
 8005280:	3330      	adds	r3, #48	; 0x30
 8005282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800528a:	2b39      	cmp	r3, #57	; 0x39
 800528c:	d904      	bls.n	8005298 <gen_numname+0x9c>
 800528e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005292:	3307      	adds	r3, #7
 8005294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	1e5a      	subs	r2, r3, #1
 800529c:	62ba      	str	r2, [r7, #40]	; 0x28
 800529e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80052a2:	4413      	add	r3, r2
 80052a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80052a8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	603b      	str	r3, [r7, #0]
	} while (seq);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1de      	bne.n	8005276 <gen_numname+0x7a>
	ns[i] = '~';
 80052b8:	f107 0214 	add.w	r2, r7, #20
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	4413      	add	r3, r2
 80052c0:	227e      	movs	r2, #126	; 0x7e
 80052c2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80052c4:	2300      	movs	r3, #0
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
 80052c8:	e002      	b.n	80052d0 <gen_numname+0xd4>
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	3301      	adds	r3, #1
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
 80052d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d205      	bcs.n	80052e4 <gen_numname+0xe8>
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	4413      	add	r3, r2
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d1f2      	bne.n	80052ca <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	2b07      	cmp	r3, #7
 80052e8:	d808      	bhi.n	80052fc <gen_numname+0x100>
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80052f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80052f4:	4413      	add	r3, r2
 80052f6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80052fa:	e000      	b.n	80052fe <gen_numname+0x102>
 80052fc:	2120      	movs	r1, #32
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	627a      	str	r2, [r7, #36]	; 0x24
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	460a      	mov	r2, r1
 800530a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	2b07      	cmp	r3, #7
 8005310:	d9e8      	bls.n	80052e4 <gen_numname+0xe8>
}
 8005312:	bf00      	nop
 8005314:	3730      	adds	r7, #48	; 0x30
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005326:	230b      	movs	r3, #11
 8005328:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	0852      	lsrs	r2, r2, #1
 8005330:	01db      	lsls	r3, r3, #7
 8005332:	4313      	orrs	r3, r2
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	1c59      	adds	r1, r3, #1
 800533a:	6079      	str	r1, [r7, #4]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	4413      	add	r3, r2
 8005340:	73fb      	strb	r3, [r7, #15]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	3b01      	subs	r3, #1
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1ed      	bne.n	800532a <sum_sfn+0x10>
	return sum;
 800534e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005362:	2100      	movs	r1, #0
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fb84 	bl	8004a72 <dir_sdi>
 800536a:	4603      	mov	r3, r0
 800536c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <dir_find+0x1e>
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	e0c1      	b.n	80054fc <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005378:	23ff      	movs	r3, #255	; 0xff
 800537a:	753b      	strb	r3, [r7, #20]
 800537c:	7d3b      	ldrb	r3, [r7, #20]
 800537e:	757b      	strb	r3, [r7, #21]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005386:	3304      	adds	r3, #4
 8005388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800538c:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539c:	3310      	adds	r3, #16
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f7fe fe80 	bl	80040a8 <move_window>
 80053a8:	4603      	mov	r3, r0
 80053aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f040 809e 	bne.w	80054f0 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ba:	3314      	adds	r3, #20
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053c6:	7dbb      	ldrb	r3, [r7, #22]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <dir_find+0x78>
 80053cc:	2304      	movs	r3, #4
 80053ce:	75fb      	strb	r3, [r7, #23]
 80053d0:	e093      	b.n	80054fa <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	330b      	adds	r3, #11
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053dc:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80053de:	7dbb      	ldrb	r3, [r7, #22]
 80053e0:	2be5      	cmp	r3, #229	; 0xe5
 80053e2:	d007      	beq.n	80053f4 <dir_find+0x9a>
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <dir_find+0xae>
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b0f      	cmp	r3, #15
 80053f2:	d009      	beq.n	8005408 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80053f4:	23ff      	movs	r3, #255	; 0xff
 80053f6:	757b      	strb	r3, [r7, #21]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80053fe:	3304      	adds	r3, #4
 8005400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	e068      	b.n	80054da <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	2b0f      	cmp	r3, #15
 800540c:	d139      	bne.n	8005482 <dir_find+0x128>
				if (dp->lfn) {
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d05f      	beq.n	80054da <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800541a:	7dbb      	ldrb	r3, [r7, #22]
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d012      	beq.n	800544a <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	7b5b      	ldrb	r3, [r3, #13]
 8005428:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800542a:	7dbb      	ldrb	r3, [r7, #22]
 800542c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005430:	75bb      	strb	r3, [r7, #22]
 8005432:	7dbb      	ldrb	r3, [r7, #22]
 8005434:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543c:	3306      	adds	r3, #6
 800543e:	881a      	ldrh	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005446:	3304      	adds	r3, #4
 8005448:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800544a:	7dba      	ldrb	r2, [r7, #22]
 800544c:	7d7b      	ldrb	r3, [r7, #21]
 800544e:	429a      	cmp	r2, r3
 8005450:	d114      	bne.n	800547c <dir_find+0x122>
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	330d      	adds	r3, #13
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	7d3a      	ldrb	r2, [r7, #20]
 800545a:	429a      	cmp	r2, r3
 800545c:	d10e      	bne.n	800547c <dir_find+0x122>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6939      	ldr	r1, [r7, #16]
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fde5 	bl	8005038 <cmp_lfn>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <dir_find+0x122>
 8005474:	7d7b      	ldrb	r3, [r7, #21]
 8005476:	3b01      	subs	r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e000      	b.n	800547e <dir_find+0x124>
 800547c:	23ff      	movs	r3, #255	; 0xff
 800547e:	757b      	strb	r3, [r7, #21]
 8005480:	e02b      	b.n	80054da <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005482:	7d7b      	ldrb	r3, [r7, #21]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d107      	bne.n	8005498 <dir_find+0x13e>
 8005488:	6938      	ldr	r0, [r7, #16]
 800548a:	f7ff ff46 	bl	800531a <sum_sfn>
 800548e:	4603      	mov	r3, r0
 8005490:	461a      	mov	r2, r3
 8005492:	7d3b      	ldrb	r3, [r7, #20]
 8005494:	4293      	cmp	r3, r2
 8005496:	d02d      	beq.n	80054f4 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549e:	3318      	adds	r3, #24
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330b      	adds	r3, #11
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10c      	bne.n	80054c8 <dir_find+0x16e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	3318      	adds	r3, #24
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	220b      	movs	r2, #11
 80054ba:	4619      	mov	r1, r3
 80054bc:	6938      	ldr	r0, [r7, #16]
 80054be:	f7fe fb97 	bl	8003bf0 <mem_cmp>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d017      	beq.n	80054f8 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80054c8:	23ff      	movs	r3, #255	; 0xff
 80054ca:	757b      	strb	r3, [r7, #21]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054d2:	3304      	adds	r3, #4
 80054d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054d8:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80054da:	2100      	movs	r1, #0
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff fba3 	bl	8004c28 <dir_next>
 80054e2:	4603      	mov	r3, r0
 80054e4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f43f af50 	beq.w	800538e <dir_find+0x34>
 80054ee:	e004      	b.n	80054fa <dir_find+0x1a0>
		if (res != FR_OK) break;
 80054f0:	bf00      	nop
 80054f2:	e002      	b.n	80054fa <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80054f4:	bf00      	nop
 80054f6:	e000      	b.n	80054fa <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80054f8:	bf00      	nop

	return res;
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08c      	sub	sp, #48	; 0x30
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005512:	3318      	adds	r3, #24
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	623b      	str	r3, [r7, #32]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8005522:	f107 030c 	add.w	r3, r7, #12
 8005526:	220c      	movs	r2, #12
 8005528:	6a39      	ldr	r1, [r7, #32]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe fb2a 	bl	8003b84 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d039      	beq.n	80055ae <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	330b      	adds	r3, #11
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800554c:	2301      	movs	r3, #1
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005550:	e013      	b.n	800557a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005552:	f107 010c 	add.w	r1, r7, #12
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	6a38      	ldr	r0, [r7, #32]
 800555c:	f7ff fe4e 	bl	80051fc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff fefa 	bl	800535a <dir_find>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800556c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	3301      	adds	r3, #1
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	2b63      	cmp	r3, #99	; 0x63
 800557e:	d9e8      	bls.n	8005552 <dir_register+0x4e>
 8005580:	e000      	b.n	8005584 <dir_register+0x80>
			if (res != FR_OK) break;
 8005582:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	2b64      	cmp	r3, #100	; 0x64
 8005588:	d101      	bne.n	800558e <dir_register+0x8a>
 800558a:	2307      	movs	r3, #7
 800558c:	e0e3      	b.n	8005756 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800558e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005592:	2b04      	cmp	r3, #4
 8005594:	d002      	beq.n	800559c <dir_register+0x98>
 8005596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800559a:	e0dc      	b.n	8005756 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	330b      	adds	r3, #11
 80055a0:	7dfa      	ldrb	r2, [r7, #23]
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d014      	beq.n	80055e2 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 80055b8:	2300      	movs	r3, #0
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80055bc:	e002      	b.n	80055c4 <dir_register+0xc0>
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	3301      	adds	r3, #1
 80055c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f5      	bne.n	80055be <dir_register+0xba>
		nent = (n + 25) / 13;
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	3319      	adds	r3, #25
 80055d6:	4a62      	ldr	r2, [pc, #392]	; (8005760 <dir_register+0x25c>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	e001      	b.n	80055e6 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80055e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff fc7f 	bl	8004eec <dir_alloc>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80055f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d160      	bne.n	80056be <dir_register+0x1ba>
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	3b01      	subs	r3, #1
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d05a      	beq.n	80056be <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560e:	3306      	adds	r3, #6
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff fa29 	bl	8004a72 <dir_sdi>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800562a:	2b00      	cmp	r3, #0
 800562c:	d147      	bne.n	80056be <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005634:	3318      	adds	r3, #24
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fe6e 	bl	800531a <sum_sfn>
 800563e:	4603      	mov	r3, r0
 8005640:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005650:	3310      	adds	r3, #16
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f7fe fd26 	bl	80040a8 <move_window>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005666:	2b00      	cmp	r3, #0
 8005668:	d128      	bne.n	80056bc <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005678:	3314      	adds	r3, #20
 800567a:	6819      	ldr	r1, [r3, #0]
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	b2da      	uxtb	r2, r3
 8005680:	7efb      	ldrb	r3, [r7, #27]
 8005682:	f7ff fd47 	bl	8005114 <fit_lfn>
				dp->fs->wflag = 1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005692:	3304      	adds	r3, #4
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8005698:	2100      	movs	r1, #0
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fac4 	bl	8004c28 <dir_next>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80056a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d107      	bne.n	80056be <dir_register+0x1ba>
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	3b01      	subs	r3, #1
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1c3      	bne.n	8005642 <dir_register+0x13e>
 80056ba:	e000      	b.n	80056be <dir_register+0x1ba>
				if (res != FR_OK) break;
 80056bc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80056be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d145      	bne.n	8005752 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d4:	3310      	adds	r3, #16
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f7fe fce4 	bl	80040a8 <move_window>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80056e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d131      	bne.n	8005752 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f4:	3314      	adds	r3, #20
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2220      	movs	r2, #32
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe fa5e 	bl	8003bbe <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005708:	3314      	adds	r3, #20
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005712:	3318      	adds	r3, #24
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	220b      	movs	r2, #11
 8005718:	4619      	mov	r1, r3
 800571a:	f7fe fa33 	bl	8003b84 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005724:	3318      	adds	r3, #24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330b      	adds	r3, #11
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005732:	3314      	adds	r3, #20
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	f002 0218 	and.w	r2, r2, #24
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574c:	3304      	adds	r3, #4
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8005752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005756:	4618      	mov	r0, r3
 8005758:	3730      	adds	r7, #48	; 0x30
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	4ec4ec4f 	.word	0x4ec4ec4f

08005764 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e002      	b.n	800577c <create_name+0x18>
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	3301      	adds	r3, #1
 800577a:	613b      	str	r3, [r7, #16]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b2f      	cmp	r3, #47	; 0x2f
 8005782:	d0f8      	beq.n	8005776 <create_name+0x12>
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b5c      	cmp	r3, #92	; 0x5c
 800578a:	d0f4      	beq.n	8005776 <create_name+0x12>
	lfn = dp->lfn;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	61ba      	str	r2, [r7, #24]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80057ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ae:	2b1f      	cmp	r3, #31
 80057b0:	d92f      	bls.n	8005812 <create_name+0xae>
 80057b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057b4:	2b2f      	cmp	r3, #47	; 0x2f
 80057b6:	d02c      	beq.n	8005812 <create_name+0xae>
 80057b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ba:	2b5c      	cmp	r3, #92	; 0x5c
 80057bc:	d029      	beq.n	8005812 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2bfe      	cmp	r3, #254	; 0xfe
 80057c2:	d901      	bls.n	80057c8 <create_name+0x64>
			return FR_INVALID_NAME;
 80057c4:	2306      	movs	r3, #6
 80057c6:	e18b      	b.n	8005ae0 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80057c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80057ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057d0:	2101      	movs	r1, #1
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 fe2c 	bl	8007430 <ff_convert>
 80057d8:	4603      	mov	r3, r0
 80057da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80057dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <create_name+0x82>
 80057e2:	2306      	movs	r3, #6
 80057e4:	e17c      	b.n	8005ae0 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80057e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057e8:	2b7f      	cmp	r3, #127	; 0x7f
 80057ea:	d809      	bhi.n	8005800 <create_name+0x9c>
 80057ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ee:	4619      	mov	r1, r3
 80057f0:	488f      	ldr	r0, [pc, #572]	; (8005a30 <create_name+0x2cc>)
 80057f2:	f7fe fa23 	bl	8003c3c <chk_chr>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <create_name+0x9c>
			return FR_INVALID_NAME;
 80057fc:	2306      	movs	r3, #6
 80057fe:	e16f      	b.n	8005ae0 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	617a      	str	r2, [r7, #20]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800580e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005810:	e7c5      	b.n	800579e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	441a      	add	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800581c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800581e:	2b1f      	cmp	r3, #31
 8005820:	d801      	bhi.n	8005826 <create_name+0xc2>
 8005822:	2304      	movs	r3, #4
 8005824:	e000      	b.n	8005828 <create_name+0xc4>
 8005826:	2300      	movs	r3, #0
 8005828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800582c:	e011      	b.n	8005852 <create_name+0xee>
		w = lfn[di - 1];
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005834:	3b01      	subs	r3, #1
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005842:	2b20      	cmp	r3, #32
 8005844:	d002      	beq.n	800584c <create_name+0xe8>
 8005846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005848:	2b2e      	cmp	r3, #46	; 0x2e
 800584a:	d106      	bne.n	800585a <create_name+0xf6>
		di--;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	3b01      	subs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ea      	bne.n	800582e <create_name+0xca>
 8005858:	e000      	b.n	800585c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800585a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <create_name+0x102>
 8005862:	2306      	movs	r3, #6
 8005864:	e13c      	b.n	8005ae0 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	2200      	movs	r2, #0
 8005870:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005878:	3318      	adds	r3, #24
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	220b      	movs	r2, #11
 800587e:	2120      	movs	r1, #32
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe f99c 	bl	8003bbe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e002      	b.n	8005892 <create_name+0x12e>
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	3301      	adds	r3, #1
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	2b20      	cmp	r3, #32
 800589e:	d0f5      	beq.n	800588c <create_name+0x128>
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	2b2e      	cmp	r3, #46	; 0x2e
 80058ac:	d0ee      	beq.n	800588c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <create_name+0x164>
 80058b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058b8:	f043 0303 	orr.w	r3, r3, #3
 80058bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80058c0:	e002      	b.n	80058c8 <create_name+0x164>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <create_name+0x17e>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058d4:	3b01      	subs	r3, #1
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	2b2e      	cmp	r3, #46	; 0x2e
 80058e0:	d1ef      	bne.n	80058c2 <create_name+0x15e>

	b = i = 0; ni = 8;
 80058e2:	2300      	movs	r3, #0
 80058e4:	623b      	str	r3, [r7, #32]
 80058e6:	2300      	movs	r3, #0
 80058e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058ec:	2308      	movs	r3, #8
 80058ee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	61ba      	str	r2, [r7, #24]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8092 	beq.w	8005a2c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800590a:	2b20      	cmp	r3, #32
 800590c:	d006      	beq.n	800591c <create_name+0x1b8>
 800590e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005910:	2b2e      	cmp	r3, #46	; 0x2e
 8005912:	d10a      	bne.n	800592a <create_name+0x1c6>
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	429a      	cmp	r2, r3
 800591a:	d006      	beq.n	800592a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800591c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005920:	f043 0303 	orr.w	r3, r3, #3
 8005924:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005928:	e07f      	b.n	8005a2a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800592a:	6a3a      	ldr	r2, [r7, #32]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	429a      	cmp	r2, r3
 8005930:	d203      	bcs.n	800593a <create_name+0x1d6>
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	429a      	cmp	r2, r3
 8005938:	d123      	bne.n	8005982 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	2b0b      	cmp	r3, #11
 800593e:	d106      	bne.n	800594e <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8005940:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005944:	f043 0303 	orr.w	r3, r3, #3
 8005948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800594c:	e077      	b.n	8005a3e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	429a      	cmp	r2, r3
 8005954:	d005      	beq.n	8005962 <create_name+0x1fe>
 8005956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800595a:	f043 0303 	orr.w	r3, r3, #3
 800595e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	429a      	cmp	r2, r3
 8005968:	d868      	bhi.n	8005a3c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	2308      	movs	r3, #8
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	230b      	movs	r3, #11
 8005974:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005980:	e053      	b.n	8005a2a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005984:	2b7f      	cmp	r3, #127	; 0x7f
 8005986:	d914      	bls.n	80059b2 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fd4f 	bl	8007430 <ff_convert>
 8005992:	4603      	mov	r3, r0
 8005994:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <create_name+0x242>
 800599c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800599e:	3b80      	subs	r3, #128	; 0x80
 80059a0:	4a24      	ldr	r2, [pc, #144]	; (8005a34 <create_name+0x2d0>)
 80059a2:	5cd3      	ldrb	r3, [r2, r3]
 80059a4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80059a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059aa:	f043 0302 	orr.w	r3, r3, #2
 80059ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80059b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <create_name+0x264>
 80059b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ba:	4619      	mov	r1, r3
 80059bc:	481e      	ldr	r0, [pc, #120]	; (8005a38 <create_name+0x2d4>)
 80059be:	f7fe f93d 	bl	8003c3c <chk_chr>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80059c8:	235f      	movs	r3, #95	; 0x5f
 80059ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059d0:	f043 0303 	orr.w	r3, r3, #3
 80059d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059d8:	e01b      	b.n	8005a12 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80059da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d909      	bls.n	80059f4 <create_name+0x290>
 80059e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e2:	2b5a      	cmp	r3, #90	; 0x5a
 80059e4:	d806      	bhi.n	80059f4 <create_name+0x290>
					b |= 2;
 80059e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059ea:	f043 0302 	orr.w	r3, r3, #2
 80059ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059f2:	e00e      	b.n	8005a12 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80059f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059f6:	2b60      	cmp	r3, #96	; 0x60
 80059f8:	d90b      	bls.n	8005a12 <create_name+0x2ae>
 80059fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059fc:	2b7a      	cmp	r3, #122	; 0x7a
 80059fe:	d808      	bhi.n	8005a12 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8005a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a0e:	3b20      	subs	r3, #32
 8005a10:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a18:	3318      	adds	r3, #24
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	1c59      	adds	r1, r3, #1
 8005a20:	6239      	str	r1, [r7, #32]
 8005a22:	4413      	add	r3, r2
 8005a24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005a2a:	e761      	b.n	80058f0 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8005a2c:	bf00      	nop
 8005a2e:	e006      	b.n	8005a3e <create_name+0x2da>
 8005a30:	08007598 	.word	0x08007598
 8005a34:	080075f0 	.word	0x080075f0
 8005a38:	080075a4 	.word	0x080075a4
			if (si > di) break;			/* No extension */
 8005a3c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a44:	3318      	adds	r3, #24
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2be5      	cmp	r3, #229	; 0xe5
 8005a4c:	d106      	bne.n	8005a5c <create_name+0x2f8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a54:	3318      	adds	r3, #24
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2205      	movs	r2, #5
 8005a5a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d104      	bne.n	8005a6c <create_name+0x308>
 8005a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a70:	f003 030c 	and.w	r3, r3, #12
 8005a74:	2b0c      	cmp	r3, #12
 8005a76:	d005      	beq.n	8005a84 <create_name+0x320>
 8005a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d105      	bne.n	8005a90 <create_name+0x32c>
		cf |= NS_LFN;
 8005a84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a88:	f043 0302 	orr.w	r3, r3, #2
 8005a8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d117      	bne.n	8005acc <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d105      	bne.n	8005ab4 <create_name+0x350>
 8005aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005aac:	f043 0310 	orr.w	r3, r3, #16
 8005ab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ab8:	f003 030c 	and.w	r3, r3, #12
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d105      	bne.n	8005acc <create_name+0x368>
 8005ac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ac4:	f043 0308 	orr.w	r3, r3, #8
 8005ac8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad2:	3318      	adds	r3, #24
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330b      	adds	r3, #11
 8005ad8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005adc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005ade:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3728      	adds	r7, #40	; 0x28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b2f      	cmp	r3, #47	; 0x2f
 8005af8:	d003      	beq.n	8005b02 <follow_path+0x1a>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b5c      	cmp	r3, #92	; 0x5c
 8005b00:	d102      	bne.n	8005b08 <follow_path+0x20>
		path++;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	3308      	adds	r3, #8
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b1f      	cmp	r3, #31
 8005b1a:	d80c      	bhi.n	8005b36 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fe ffa7 	bl	8004a72 <dir_sdi>
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2e:	3314      	adds	r3, #20
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e04c      	b.n	8005bd0 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b36:	463b      	mov	r3, r7
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fe12 	bl	8005764 <create_name>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d13d      	bne.n	8005bc6 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fc05 	bl	800535a <dir_find>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5a:	3318      	adds	r3, #24
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	7adb      	ldrb	r3, [r3, #11]
 8005b60:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d12d      	bne.n	8005bca <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005b6e:	7bbb      	ldrb	r3, [r7, #14]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d128      	bne.n	8005bca <follow_path+0xe2>
 8005b78:	2305      	movs	r3, #5
 8005b7a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005b7c:	e025      	b.n	8005bca <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d122      	bne.n	8005bce <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8e:	3314      	adds	r3, #20
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	330b      	adds	r3, #11
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8005ba2:	2305      	movs	r3, #5
 8005ba4:	73fb      	strb	r3, [r7, #15]
 8005ba6:	e013      	b.n	8005bd0 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff f9eb 	bl	8004f8e <ld_clust>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005bc4:	e7b7      	b.n	8005b36 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005bc6:	bf00      	nop
 8005bc8:	e002      	b.n	8005bd0 <follow_path+0xe8>
				break;
 8005bca:	bf00      	nop
 8005bcc:	e000      	b.n	8005bd0 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005bce:	bf00      	nop
		}
	}

	return res;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005be2:	f04f 33ff 	mov.w	r3, #4294967295
 8005be6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d031      	beq.n	8005c54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e002      	b.n	8005bfe <get_ldnumber+0x24>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b1f      	cmp	r3, #31
 8005c04:	d903      	bls.n	8005c0e <get_ldnumber+0x34>
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b3a      	cmp	r3, #58	; 0x3a
 8005c0c:	d1f4      	bne.n	8005bf8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b3a      	cmp	r3, #58	; 0x3a
 8005c14:	d11c      	bne.n	8005c50 <get_ldnumber+0x76>
			tp = *path;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	60fa      	str	r2, [r7, #12]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	3b30      	subs	r3, #48	; 0x30
 8005c26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b09      	cmp	r3, #9
 8005c2c:	d80e      	bhi.n	8005c4c <get_ldnumber+0x72>
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d10a      	bne.n	8005c4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d107      	bne.n	8005c4c <get_ldnumber+0x72>
					vol = (int)i;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3301      	adds	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	e002      	b.n	8005c56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005c54:	693b      	ldr	r3, [r7, #16]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c70:	3304      	adds	r3, #4
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c82:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fe fa0e 	bl	80040a8 <move_window>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <check_fs+0x36>
		return 3;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e04a      	b.n	8005d2c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	b21a      	sxth	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005caa:	b21b      	sxth	r3, r3
 8005cac:	4313      	orrs	r3, r2
 8005cae:	b21b      	sxth	r3, r3
 8005cb0:	4a20      	ldr	r2, [pc, #128]	; (8005d34 <check_fs+0xd4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d001      	beq.n	8005cba <check_fs+0x5a>
		return 2;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e038      	b.n	8005d2c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3336      	adds	r3, #54	; 0x36
 8005cbe:	3303      	adds	r3, #3
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	061a      	lsls	r2, r3, #24
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3336      	adds	r3, #54	; 0x36
 8005cc8:	3302      	adds	r3, #2
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	3236      	adds	r2, #54	; 0x36
 8005cd4:	3201      	adds	r2, #1
 8005cd6:	7812      	ldrb	r2, [r2, #0]
 8005cd8:	0212      	lsls	r2, r2, #8
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <check_fs+0xd8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d101      	bne.n	8005cf2 <check_fs+0x92>
		return 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e01c      	b.n	8005d2c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3352      	adds	r3, #82	; 0x52
 8005cf6:	3303      	adds	r3, #3
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	061a      	lsls	r2, r3, #24
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3352      	adds	r3, #82	; 0x52
 8005d00:	3302      	adds	r3, #2
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	041b      	lsls	r3, r3, #16
 8005d06:	4313      	orrs	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	3252      	adds	r2, #82	; 0x52
 8005d0c:	3201      	adds	r2, #1
 8005d0e:	7812      	ldrb	r2, [r2, #0]
 8005d10:	0212      	lsls	r2, r2, #8
 8005d12:	4313      	orrs	r3, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d20:	4a05      	ldr	r2, [pc, #20]	; (8005d38 <check_fs+0xd8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d101      	bne.n	8005d2a <check_fs+0xca>
		return 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e000      	b.n	8005d2c <check_fs+0xcc>

	return 1;
 8005d2a:	2301      	movs	r3, #1
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	ffffaa55 	.word	0xffffaa55
 8005d38:	00544146 	.word	0x00544146

08005d3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b096      	sub	sp, #88	; 0x58
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005d50:	68b8      	ldr	r0, [r7, #8]
 8005d52:	f7ff ff42 	bl	8005bda <get_ldnumber>
 8005d56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	da01      	bge.n	8005d62 <find_volume+0x26>
 8005d5e:	230b      	movs	r3, #11
 8005d60:	e33c      	b.n	80063dc <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005d62:	4ab3      	ldr	r2, [pc, #716]	; (8006030 <find_volume+0x2f4>)
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <find_volume+0x3a>
 8005d72:	230c      	movs	r3, #12
 8005d74:	e332      	b.n	80063dc <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d7a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01d      	beq.n	8005dc4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8e:	3301      	adds	r3, #1
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fd fe58 	bl	8003a48 <disk_status>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005d9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10c      	bne.n	8005dc4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <find_volume+0x84>
 8005db0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8005dbc:	230a      	movs	r3, #10
 8005dbe:	e30d      	b.n	80063dc <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e30b      	b.n	80063dc <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd8:	3301      	adds	r3, #1
 8005dda:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de2:	3301      	adds	r3, #1
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fd fe48 	bl	8003a7c <disk_initialize>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005df2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e2ec      	b.n	80063dc <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <find_volume+0xdc>
 8005e08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8005e14:	230a      	movs	r3, #10
 8005e16:	e2e1      	b.n	80063dc <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1e:	3301      	adds	r3, #1
 8005e20:	7818      	ldrb	r0, [r3, #0]
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e28:	330a      	adds	r3, #10
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	2102      	movs	r1, #2
 8005e2e:	f7fd fe8b 	bl	8003b48 <disk_ioctl>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10f      	bne.n	8005e58 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3e:	330a      	adds	r3, #10
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e46:	d307      	bcc.n	8005e58 <find_volume+0x11c>
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4e:	330a      	adds	r3, #10
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	d901      	bls.n	8005e5c <find_volume+0x120>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e2bf      	b.n	80063dc <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005e60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e64:	f7ff fefc 	bl	8005c60 <check_fs>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005e6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d155      	bne.n	8005f22 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005e76:	2300      	movs	r3, #0
 8005e78:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7a:	e029      	b.n	8005ed0 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005e86:	4413      	add	r3, r2
 8005e88:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d012      	beq.n	8005eba <find_volume+0x17e>
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	330b      	adds	r3, #11
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	061a      	lsls	r2, r3, #24
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	330a      	adds	r3, #10
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea8:	3209      	adds	r2, #9
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	0212      	lsls	r2, r2, #8
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb2:	3208      	adds	r2, #8
 8005eb4:	7812      	ldrb	r2, [r2, #0]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	e000      	b.n	8005ebc <find_volume+0x180>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005ec4:	440b      	add	r3, r1
 8005ec6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	3301      	adds	r3, #1
 8005ece:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d9d2      	bls.n	8005e7c <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <find_volume+0x1aa>
 8005ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005eee:	4413      	add	r3, r2
 8005ef0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005ef4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <find_volume+0x1cc>
 8005efc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005efe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f00:	f7ff feae 	bl	8005c60 <check_fs>
 8005f04:	4603      	mov	r3, r0
 8005f06:	e000      	b.n	8005f0a <find_volume+0x1ce>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005f0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <find_volume+0x1e6>
 8005f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f18:	3301      	adds	r3, #1
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d9e1      	bls.n	8005ee6 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005f22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	d101      	bne.n	8005f2e <find_volume+0x1f2>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e256      	b.n	80063dc <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005f2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <find_volume+0x1fe>
 8005f36:	230d      	movs	r3, #13
 8005f38:	e250      	b.n	80063dc <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	7b1b      	ldrb	r3, [r3, #12]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	b21a      	sxth	r2, r3
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	7adb      	ldrb	r3, [r3, #11]
 8005f46:	b21b      	sxth	r3, r3
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	b21b      	sxth	r3, r3
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f54:	330a      	adds	r3, #10
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8005f5c:	230d      	movs	r3, #13
 8005f5e:	e23d      	b.n	80063dc <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	7ddb      	ldrb	r3, [r3, #23]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	b21a      	sxth	r2, r3
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	7d9b      	ldrb	r3, [r3, #22]
 8005f6c:	b21b      	sxth	r3, r3
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	b21b      	sxth	r3, r3
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d112      	bne.n	8005fa2 <find_volume+0x266>
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005f82:	061a      	lsls	r2, r3, #24
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005f8a:	041b      	lsls	r3, r3, #16
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f90:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005f94:	0212      	lsls	r2, r2, #8
 8005f96:	4313      	orrs	r3, r2
 8005f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f9a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa8:	3318      	adds	r3, #24
 8005faa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fac:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	7c1a      	ldrb	r2, [r3, #16]
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb8:	3303      	adds	r3, #3
 8005fba:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc2:	3303      	adds	r3, #3
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d008      	beq.n	8005fdc <find_volume+0x2a0>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd0:	3303      	adds	r3, #3
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d001      	beq.n	8005fdc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8005fd8:	230d      	movs	r3, #13
 8005fda:	e1ff      	b.n	80063dc <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe2:	3303      	adds	r3, #3
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
 8005fee:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	7b5a      	ldrb	r2, [r3, #13]
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006004:	3302      	adds	r3, #2
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00e      	beq.n	800602a <find_volume+0x2ee>
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006012:	3302      	adds	r3, #2
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800601e:	3302      	adds	r3, #2
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	3b01      	subs	r3, #1
 8006024:	4013      	ands	r3, r2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800602a:	230d      	movs	r3, #13
 800602c:	e1d6      	b.n	80063dc <find_volume+0x6a0>
 800602e:	bf00      	nop
 8006030:	20000048 	.word	0x20000048

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	7c9b      	ldrb	r3, [r3, #18]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	b21a      	sxth	r2, r3
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	7c5b      	ldrb	r3, [r3, #17]
 8006040:	b21b      	sxth	r3, r3
 8006042:	4313      	orrs	r3, r2
 8006044:	b21b      	sxth	r3, r3
 8006046:	b29a      	uxth	r2, r3
 8006048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604e:	3308      	adds	r3, #8
 8006050:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006058:	3308      	adds	r3, #8
 800605a:	881a      	ldrh	r2, [r3, #0]
 800605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006062:	330a      	adds	r3, #10
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	b29b      	uxth	r3, r3
 800606a:	fbb2 f1f3 	udiv	r1, r2, r3
 800606e:	fb03 f301 	mul.w	r3, r3, r1
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800607a:	230d      	movs	r3, #13
 800607c:	e1ae      	b.n	80063dc <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	7d1b      	ldrb	r3, [r3, #20]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	b21a      	sxth	r2, r3
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	7cdb      	ldrb	r3, [r3, #19]
 800608a:	b21b      	sxth	r3, r3
 800608c:	4313      	orrs	r3, r2
 800608e:	b21b      	sxth	r3, r3
 8006090:	b29b      	uxth	r3, r3
 8006092:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006096:	2b00      	cmp	r3, #0
 8006098:	d112      	bne.n	80060c0 <find_volume+0x384>
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80060a0:	061a      	lsls	r2, r3, #24
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	4313      	orrs	r3, r2
 80060ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ae:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80060b2:	0212      	lsls	r2, r2, #8
 80060b4:	4313      	orrs	r3, r2
 80060b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80060bc:	4313      	orrs	r3, r2
 80060be:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	7bdb      	ldrb	r3, [r3, #15]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	b21a      	sxth	r2, r3
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	7b9b      	ldrb	r3, [r3, #14]
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b21b      	sxth	r3, r3
 80060d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80060d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <find_volume+0x3a2>
 80060da:	230d      	movs	r3, #13
 80060dc:	e17e      	b.n	80063dc <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80060de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e2:	441a      	add	r2, r3
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ea:	3308      	adds	r3, #8
 80060ec:	8819      	ldrh	r1, [r3, #0]
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f4:	330a      	adds	r3, #10
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006100:	b29b      	uxth	r3, r3
 8006102:	4413      	add	r3, r2
 8006104:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	429a      	cmp	r2, r3
 800610c:	d201      	bcs.n	8006112 <find_volume+0x3d6>
 800610e:	230d      	movs	r3, #13
 8006110:	e164      	b.n	80063dc <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611e:	3302      	adds	r3, #2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	fbb2 f3f3 	udiv	r3, r2, r3
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <find_volume+0x3f6>
 800612e:	230d      	movs	r3, #13
 8006130:	e154      	b.n	80063dc <find_volume+0x6a0>
	fmt = FS_FAT12;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800613e:	4293      	cmp	r3, r2
 8006140:	d902      	bls.n	8006148 <find_volume+0x40c>
 8006142:	2302      	movs	r3, #2
 8006144:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800614e:	4293      	cmp	r3, r2
 8006150:	d902      	bls.n	8006158 <find_volume+0x41c>
 8006152:	2303      	movs	r3, #3
 8006154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	1c9a      	adds	r2, r3, #2
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006162:	3314      	adds	r3, #20
 8006164:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616c:	331c      	adds	r3, #28
 800616e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006170:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006172:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006176:	441a      	add	r2, r3
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800617e:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8006180:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	441a      	add	r2, r3
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800618c:	3308      	adds	r3, #8
 800618e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8006190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006194:	2b03      	cmp	r3, #3
 8006196:	d127      	bne.n	80061e8 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619e:	3308      	adds	r3, #8
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <find_volume+0x46e>
 80061a6:	230d      	movs	r3, #13
 80061a8:	e118      	b.n	80063dc <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80061b0:	061a      	lsls	r2, r3, #24
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	4313      	orrs	r3, r2
 80061bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061be:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80061c2:	0212      	lsls	r2, r2, #8
 80061c4:	4313      	orrs	r3, r2
 80061c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061c8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80061cc:	431a      	orrs	r2, r3
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80061d4:	3304      	adds	r3, #4
 80061d6:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061de:	3314      	adds	r3, #20
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	647b      	str	r3, [r7, #68]	; 0x44
 80061e6:	e030      	b.n	800624a <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ee:	3308      	adds	r3, #8
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <find_volume+0x4be>
 80061f6:	230d      	movs	r3, #13
 80061f8:	e0f0      	b.n	80063dc <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006204:	441a      	add	r2, r3
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800620c:	3304      	adds	r3, #4
 800620e:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006214:	2b02      	cmp	r3, #2
 8006216:	d106      	bne.n	8006226 <find_volume+0x4ea>
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621e:	3314      	adds	r3, #20
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	e010      	b.n	8006248 <find_volume+0x50c>
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622c:	3314      	adds	r3, #20
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	4613      	mov	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	4413      	add	r3, r2
 8006236:	085a      	lsrs	r2, r3, #1
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800623e:	3314      	adds	r3, #20
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006248:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006250:	3318      	adds	r3, #24
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625a:	330a      	adds	r3, #10
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006262:	440b      	add	r3, r1
 8006264:	1e59      	subs	r1, r3, #1
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626c:	330a      	adds	r3, #10
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	fbb1 f3f3 	udiv	r3, r1, r3
 8006274:	429a      	cmp	r2, r3
 8006276:	d201      	bcs.n	800627c <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8006278:	230d      	movs	r3, #13
 800627a:	e0af      	b.n	80063dc <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006282:	3310      	adds	r3, #16
 8006284:	f04f 32ff 	mov.w	r2, #4294967295
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006290:	3310      	adds	r3, #16
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629a:	330c      	adds	r3, #12
 800629c:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a4:	3305      	adds	r3, #5
 80062a6:	2280      	movs	r2, #128	; 0x80
 80062a8:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80062aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d17d      	bne.n	80063ae <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	b21a      	sxth	r2, r3
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062c2:	b21b      	sxth	r3, r3
 80062c4:	4313      	orrs	r3, r2
 80062c6:	b21b      	sxth	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d170      	bne.n	80063ae <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 80062cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ce:	3301      	adds	r3, #1
 80062d0:	4619      	mov	r1, r3
 80062d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062d4:	f7fd fee8 	bl	80040a8 <move_window>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d167      	bne.n	80063ae <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e4:	3305      	adds	r3, #5
 80062e6:	2200      	movs	r2, #0
 80062e8:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	b21a      	sxth	r2, r3
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80062fa:	b21b      	sxth	r3, r3
 80062fc:	4313      	orrs	r3, r2
 80062fe:	b21b      	sxth	r3, r3
 8006300:	4a38      	ldr	r2, [pc, #224]	; (80063e4 <find_volume+0x6a8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d153      	bne.n	80063ae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	78db      	ldrb	r3, [r3, #3]
 800630a:	061a      	lsls	r2, r3, #24
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	789b      	ldrb	r3, [r3, #2]
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	4313      	orrs	r3, r2
 8006314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006316:	7852      	ldrb	r2, [r2, #1]
 8006318:	0212      	lsls	r2, r2, #8
 800631a:	4313      	orrs	r3, r2
 800631c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	4313      	orrs	r3, r2
 8006322:	4a31      	ldr	r2, [pc, #196]	; (80063e8 <find_volume+0x6ac>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d142      	bne.n	80063ae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800632e:	061a      	lsls	r2, r3, #24
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006336:	041b      	lsls	r3, r3, #16
 8006338:	4313      	orrs	r3, r2
 800633a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006340:	0212      	lsls	r2, r2, #8
 8006342:	4313      	orrs	r3, r2
 8006344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006346:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800634a:	4313      	orrs	r3, r2
 800634c:	4a27      	ldr	r2, [pc, #156]	; (80063ec <find_volume+0x6b0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d12d      	bne.n	80063ae <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006358:	061a      	lsls	r2, r3, #24
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006360:	041b      	lsls	r3, r3, #16
 8006362:	4313      	orrs	r3, r2
 8006364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006366:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800636a:	0212      	lsls	r2, r2, #8
 800636c:	4313      	orrs	r3, r2
 800636e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006370:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006374:	431a      	orrs	r2, r3
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637c:	3310      	adds	r3, #16
 800637e:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006386:	061a      	lsls	r2, r3, #24
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	4313      	orrs	r3, r2
 8006392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006394:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006398:	0212      	lsls	r2, r2, #8
 800639a:	4313      	orrs	r3, r2
 800639c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800639e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80063a2:	431a      	orrs	r2, r3
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063aa:	330c      	adds	r3, #12
 80063ac:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80063b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <find_volume+0x6b4>)
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <find_volume+0x6b4>)
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <find_volume+0x6b4>)
 80063c8:	881a      	ldrh	r2, [r3, #0]
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d0:	3306      	adds	r3, #6
 80063d2:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80063d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063d6:	f7fd fde5 	bl	8003fa4 <clear_lock>
#endif

	return FR_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3758      	adds	r7, #88	; 0x58
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	ffffaa55 	.word	0xffffaa55
 80063e8:	41615252 	.word	0x41615252
 80063ec:	61417272 	.word	0x61417272
 80063f0:	2000004c 	.word	0x2000004c

080063f4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d02d      	beq.n	8006462 <validate+0x6e>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d027      	beq.n	8006462 <validate+0x6e>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01e      	beq.n	8006462 <validate+0x6e>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006430:	3306      	adds	r3, #6
 8006432:	881a      	ldrh	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643a:	3304      	adds	r3, #4
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d10f      	bne.n	8006462 <validate+0x6e>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644e:	3301      	adds	r3, #1
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f7fd faf8 	bl	8003a48 <disk_status>
 8006458:	4603      	mov	r3, r0
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <validate+0x72>
		return FR_INVALID_OBJECT;
 8006462:	2309      	movs	r3, #9
 8006464:	e000      	b.n	8006468 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff fba7 	bl	8005bda <get_ldnumber>
 800648c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b00      	cmp	r3, #0
 8006492:	da01      	bge.n	8006498 <f_mount+0x28>
 8006494:	230b      	movs	r3, #11
 8006496:	e02f      	b.n	80064f8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006498:	4a19      	ldr	r2, [pc, #100]	; (8006500 <f_mount+0x90>)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80064a8:	69b8      	ldr	r0, [r7, #24]
 80064aa:	f7fd fd7b 	bl	8003fa4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	490d      	ldr	r1, [pc, #52]	; (8006500 <f_mount+0x90>)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <f_mount+0x6e>
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d001      	beq.n	80064e2 <f_mount+0x72>
 80064de:	2300      	movs	r3, #0
 80064e0:	e00a      	b.n	80064f8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80064e2:	f107 0108 	add.w	r1, r7, #8
 80064e6:	f107 030c 	add.w	r3, r7, #12
 80064ea:	2200      	movs	r2, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fc25 	bl	8005d3c <find_volume>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3720      	adds	r7, #32
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000048 	.word	0x20000048

08006504 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	f107 0318 	add.w	r3, r7, #24
 8006512:	3b0c      	subs	r3, #12
 8006514:	6018      	str	r0, [r3, #0]
 8006516:	f107 0318 	add.w	r3, r7, #24
 800651a:	3b10      	subs	r3, #16
 800651c:	6019      	str	r1, [r3, #0]
 800651e:	f107 0318 	add.w	r3, r7, #24
 8006522:	3b11      	subs	r3, #17
 8006524:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006526:	f107 0318 	add.w	r3, r7, #24
 800652a:	3b0c      	subs	r3, #12
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <f_open+0x32>
 8006532:	2309      	movs	r3, #9
 8006534:	e319      	b.n	8006b6a <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8006536:	f107 0318 	add.w	r3, r7, #24
 800653a:	3b0c      	subs	r3, #12
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006546:	f107 0318 	add.w	r3, r7, #24
 800654a:	3b11      	subs	r3, #17
 800654c:	f107 0218 	add.w	r2, r7, #24
 8006550:	3a11      	subs	r2, #17
 8006552:	7812      	ldrb	r2, [r2, #0]
 8006554:	f002 021f 	and.w	r2, r2, #31
 8006558:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800655a:	f107 0318 	add.w	r3, r7, #24
 800655e:	3b11      	subs	r3, #17
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	f023 0301 	bic.w	r3, r3, #1
 8006566:	b2da      	uxtb	r2, r3
 8006568:	f107 0118 	add.w	r1, r7, #24
 800656c:	3910      	subs	r1, #16
 800656e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006572:	3b18      	subs	r3, #24
 8006574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff fbdf 	bl	8005d3c <find_volume>
 800657e:	4603      	mov	r3, r0
 8006580:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006584:	f102 0217 	add.w	r2, r2, #23
 8006588:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800658a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800658e:	f103 0317 	add.w	r3, r3, #23
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	f040 82e3 	bne.w	8006b60 <f_open+0x65c>
		INIT_BUF(dj);
 800659a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800659e:	3b18      	subs	r3, #24
 80065a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a4:	3318      	adds	r3, #24
 80065a6:	f107 0218 	add.w	r2, r7, #24
 80065aa:	3a04      	subs	r2, #4
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065b2:	3b18      	subs	r3, #24
 80065b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80065b8:	4ad1      	ldr	r2, [pc, #836]	; (8006900 <f_open+0x3fc>)
 80065ba:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 80065bc:	f107 0318 	add.w	r3, r7, #24
 80065c0:	3b10      	subs	r3, #16
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065c8:	3b18      	subs	r3, #24
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff fa8b 	bl	8005ae8 <follow_path>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80065d8:	f102 0217 	add.w	r2, r2, #23
 80065dc:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80065de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065e2:	3b18      	subs	r3, #24
 80065e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e8:	3314      	adds	r3, #20
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80065f0:	f102 0210 	add.w	r2, r2, #16
 80065f4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80065f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80065fa:	f103 0317 	add.w	r3, r3, #23
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d126      	bne.n	8006652 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8006604:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006608:	f103 0310 	add.w	r3, r3, #16
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <f_open+0x11c>
				res = FR_INVALID_NAME;
 8006612:	2306      	movs	r3, #6
 8006614:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006618:	f102 0217 	add.w	r2, r2, #23
 800661c:	7013      	strb	r3, [r2, #0]
 800661e:	e018      	b.n	8006652 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006620:	f107 0318 	add.w	r3, r7, #24
 8006624:	3b11      	subs	r3, #17
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800663c:	3b18      	subs	r3, #24
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f7fd fb15 	bl	8003c70 <chk_lock>
 8006646:	4603      	mov	r3, r0
 8006648:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800664c:	f102 0217 	add.w	r2, r2, #23
 8006650:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006652:	f107 0318 	add.w	r3, r7, #24
 8006656:	3b11      	subs	r3, #17
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	f003 031c 	and.w	r3, r3, #28
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8150 	beq.w	8006904 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8006664:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006668:	f103 0317 	add.w	r3, r3, #23
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d030      	beq.n	80066d4 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006672:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006676:	f103 0317 	add.w	r3, r3, #23
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d112      	bne.n	80066a6 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006680:	f7fd fb68 	bl	8003d54 <enq_lock>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d007      	beq.n	800669a <f_open+0x196>
 800668a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800668e:	3b18      	subs	r3, #24
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe ff37 	bl	8005504 <dir_register>
 8006696:	4603      	mov	r3, r0
 8006698:	e000      	b.n	800669c <f_open+0x198>
 800669a:	2312      	movs	r3, #18
 800669c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80066a0:	f102 0217 	add.w	r2, r2, #23
 80066a4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80066a6:	f107 0318 	add.w	r3, r7, #24
 80066aa:	3b11      	subs	r3, #17
 80066ac:	f107 0218 	add.w	r2, r7, #24
 80066b0:	3a11      	subs	r2, #17
 80066b2:	7812      	ldrb	r2, [r2, #0]
 80066b4:	f042 0208 	orr.w	r2, r2, #8
 80066b8:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80066ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80066be:	3b18      	subs	r3, #24
 80066c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c4:	3314      	adds	r3, #20
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80066cc:	f102 0210 	add.w	r2, r2, #16
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	e01f      	b.n	8006714 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80066d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80066d8:	f103 0310 	add.w	r3, r3, #16
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330b      	adds	r3, #11
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f003 0311 	and.w	r3, r3, #17
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <f_open+0x1f4>
					res = FR_DENIED;
 80066ea:	2307      	movs	r3, #7
 80066ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80066f0:	f102 0217 	add.w	r2, r2, #23
 80066f4:	7013      	strb	r3, [r2, #0]
 80066f6:	e00d      	b.n	8006714 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80066f8:	f107 0318 	add.w	r3, r7, #24
 80066fc:	3b11      	subs	r3, #17
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <f_open+0x210>
						res = FR_EXIST;
 8006708:	2308      	movs	r3, #8
 800670a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800670e:	f102 0217 	add.w	r2, r2, #23
 8006712:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006714:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006718:	f103 0317 	add.w	r3, r3, #23
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 8122 	bne.w	8006968 <f_open+0x464>
 8006724:	f107 0318 	add.w	r3, r7, #24
 8006728:	3b11      	subs	r3, #17
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8119 	beq.w	8006968 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8006736:	f7fd f925 	bl	8003984 <get_fattime>
 800673a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800673e:	f103 030c 	add.w	r3, r3, #12
 8006742:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006744:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006748:	f103 0310 	add.w	r3, r3, #16
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330e      	adds	r3, #14
 8006750:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006754:	f102 020c 	add.w	r2, r2, #12
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006762:	f103 030c 	add.w	r3, r3, #12
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	b29b      	uxth	r3, r3
 800676a:	0a1b      	lsrs	r3, r3, #8
 800676c:	b29a      	uxth	r2, r3
 800676e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006772:	f103 0310 	add.w	r3, r3, #16
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330f      	adds	r3, #15
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006782:	f103 030c 	add.w	r3, r3, #12
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	0c1a      	lsrs	r2, r3, #16
 800678a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800678e:	f103 0310 	add.w	r3, r3, #16
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3310      	adds	r3, #16
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800679e:	f103 030c 	add.w	r3, r3, #12
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	0e1a      	lsrs	r2, r3, #24
 80067a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067aa:	f103 0310 	add.w	r3, r3, #16
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3311      	adds	r3, #17
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80067b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067ba:	f103 0310 	add.w	r3, r3, #16
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330b      	adds	r3, #11
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80067c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067ca:	f103 0310 	add.w	r3, r3, #16
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	331c      	adds	r3, #28
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067da:	f103 0310 	add.w	r3, r3, #16
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	331d      	adds	r3, #29
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067ea:	f103 0310 	add.w	r3, r3, #16
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	331e      	adds	r3, #30
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067fa:	f103 0310 	add.w	r3, r3, #16
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	331f      	adds	r3, #31
 8006802:	2200      	movs	r2, #0
 8006804:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006806:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800680a:	3b18      	subs	r3, #24
 800680c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006816:	f102 0210 	add.w	r2, r2, #16
 800681a:	6811      	ldr	r1, [r2, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fbb6 	bl	8004f8e <ld_clust>
 8006822:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006826:	f103 0308 	add.w	r3, r3, #8
 800682a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800682c:	2100      	movs	r1, #0
 800682e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006832:	f103 0310 	add.w	r3, r3, #16
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	f7fe fbd7 	bl	8004fea <st_clust>
				dj.fs->wflag = 1;
 800683c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006840:	3b18      	subs	r3, #24
 8006842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800684c:	3304      	adds	r3, #4
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 8006852:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006856:	f103 0308 	add.w	r3, r3, #8
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8083 	beq.w	8006968 <f_open+0x464>
					dw = dj.fs->winsect;
 8006862:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006866:	3b18      	subs	r3, #24
 8006868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006872:	330c      	adds	r3, #12
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800687a:	f102 020c 	add.w	r2, r2, #12
 800687e:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006884:	3b18      	subs	r3, #24
 8006886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006890:	f102 0208 	add.w	r2, r2, #8
 8006894:	6811      	ldr	r1, [r2, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fd ff8f 	bl	80047ba <remove_chain>
 800689c:	4603      	mov	r3, r0
 800689e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068a2:	f102 0217 	add.w	r2, r2, #23
 80068a6:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80068a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80068ac:	f103 0317 	add.w	r3, r3, #23
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d158      	bne.n	8006968 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80068b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068ba:	3b18      	subs	r3, #24
 80068bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068c6:	f102 0208 	add.w	r2, r2, #8
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	3a01      	subs	r2, #1
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	330c      	adds	r3, #12
 80068d4:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80068d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068da:	3b18      	subs	r3, #24
 80068dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068e6:	f102 020c 	add.w	r2, r2, #12
 80068ea:	6811      	ldr	r1, [r2, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fd fbdb 	bl	80040a8 <move_window>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068f8:	f102 0217 	add.w	r2, r2, #23
 80068fc:	7013      	strb	r3, [r2, #0]
 80068fe:	e033      	b.n	8006968 <f_open+0x464>
 8006900:	20000068 	.word	0x20000068
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006904:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006908:	f103 0317 	add.w	r3, r3, #23
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d12a      	bne.n	8006968 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006912:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006916:	f103 0310 	add.w	r3, r3, #16
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330b      	adds	r3, #11
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b00      	cmp	r3, #0
 8006926:	d006      	beq.n	8006936 <f_open+0x432>
					res = FR_NO_FILE;
 8006928:	2304      	movs	r3, #4
 800692a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800692e:	f102 0217 	add.w	r2, r2, #23
 8006932:	7013      	strb	r3, [r2, #0]
 8006934:	e018      	b.n	8006968 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006936:	f107 0318 	add.w	r3, r7, #24
 800693a:	3b11      	subs	r3, #17
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d010      	beq.n	8006968 <f_open+0x464>
 8006946:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800694a:	f103 0310 	add.w	r3, r3, #16
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	330b      	adds	r3, #11
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <f_open+0x464>
						res = FR_DENIED;
 800695c:	2307      	movs	r3, #7
 800695e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006962:	f102 0217 	add.w	r2, r2, #23
 8006966:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006968:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800696c:	f103 0317 	add.w	r3, r3, #23
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d15b      	bne.n	8006a2e <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006976:	f107 0318 	add.w	r3, r7, #24
 800697a:	3b11      	subs	r3, #17
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <f_open+0x496>
				mode |= FA__WRITTEN;
 8006986:	f107 0318 	add.w	r3, r7, #24
 800698a:	3b11      	subs	r3, #17
 800698c:	f107 0218 	add.w	r2, r7, #24
 8006990:	3a11      	subs	r2, #17
 8006992:	7812      	ldrb	r2, [r2, #0]
 8006994:	f042 0220 	orr.w	r2, r2, #32
 8006998:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800699a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800699e:	3b18      	subs	r3, #24
 80069a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80069aa:	330c      	adds	r3, #12
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	f107 0318 	add.w	r3, r7, #24
 80069b2:	3b0c      	subs	r3, #12
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ba:	331c      	adds	r3, #28
 80069bc:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 80069be:	f107 0318 	add.w	r3, r7, #24
 80069c2:	3b0c      	subs	r3, #12
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80069ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80069ce:	f102 0210 	add.w	r2, r2, #16
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80069d6:	f107 0318 	add.w	r3, r7, #24
 80069da:	3b11      	subs	r3, #17
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069f2:	3b18      	subs	r3, #24
 80069f4:	4611      	mov	r1, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fd f9d0 	bl	8003d9c <inc_lock>
 80069fc:	4602      	mov	r2, r0
 80069fe:	f107 0318 	add.w	r3, r7, #24
 8006a02:	3b0c      	subs	r3, #12
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8006a0e:	f107 0318 	add.w	r3, r7, #24
 8006a12:	3b0c      	subs	r3, #12
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d105      	bne.n	8006a2e <f_open+0x52a>
 8006a22:	2302      	movs	r3, #2
 8006a24:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a28:	f102 0217 	add.w	r2, r2, #23
 8006a2c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006a2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a32:	f103 0317 	add.w	r3, r3, #23
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f040 8091 	bne.w	8006b60 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8006a3e:	f107 0318 	add.w	r3, r7, #24
 8006a42:	3b0c      	subs	r3, #12
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a4a:	3306      	adds	r3, #6
 8006a4c:	f107 0218 	add.w	r2, r7, #24
 8006a50:	3a11      	subs	r2, #17
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8006a56:	f107 0318 	add.w	r3, r7, #24
 8006a5a:	3b0c      	subs	r3, #12
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a62:	3307      	adds	r3, #7
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006a68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a6c:	3b18      	subs	r3, #24
 8006a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a78:	f102 0210 	add.w	r2, r2, #16
 8006a7c:	6811      	ldr	r1, [r2, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe fa85 	bl	8004f8e <ld_clust>
 8006a84:	4602      	mov	r2, r0
 8006a86:	f107 0318 	add.w	r3, r7, #24
 8006a8a:	3b0c      	subs	r3, #12
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a92:	3310      	adds	r3, #16
 8006a94:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006a96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a9a:	f103 0310 	add.w	r3, r3, #16
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	331f      	adds	r3, #31
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	061a      	lsls	r2, r3, #24
 8006aa6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006aaa:	f103 0310 	add.w	r3, r3, #16
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	331e      	adds	r3, #30
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	041b      	lsls	r3, r3, #16
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006abc:	f102 0210 	add.w	r2, r2, #16
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	321d      	adds	r2, #29
 8006ac4:	7812      	ldrb	r2, [r2, #0]
 8006ac6:	0212      	lsls	r2, r2, #8
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ace:	f102 0210 	add.w	r2, r2, #16
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	321c      	adds	r2, #28
 8006ad6:	7812      	ldrb	r2, [r2, #0]
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	f107 0318 	add.w	r3, r7, #24
 8006ade:	3b0c      	subs	r3, #12
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8006aea:	f107 0318 	add.w	r3, r7, #24
 8006aee:	3b0c      	subs	r3, #12
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af6:	3308      	adds	r3, #8
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8006afc:	f107 0318 	add.w	r3, r7, #24
 8006b00:	3b0c      	subs	r3, #12
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b08:	3318      	adds	r3, #24
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006b0e:	f107 0318 	add.w	r3, r7, #24
 8006b12:	3b0c      	subs	r3, #12
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006b20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b24:	3b18      	subs	r3, #24
 8006b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	f107 0318 	add.w	r3, r7, #24
 8006b30:	3b0c      	subs	r3, #12
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b38:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8006b3a:	f107 0318 	add.w	r3, r7, #24
 8006b3e:	3b0c      	subs	r3, #12
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b4c:	3306      	adds	r3, #6
 8006b4e:	881a      	ldrh	r2, [r3, #0]
 8006b50:	f107 0318 	add.w	r3, r7, #24
 8006b54:	3b0c      	subs	r3, #12
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006b60:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b64:	f103 0317 	add.w	r3, r3, #23
 8006b68:	781b      	ldrb	r3, [r3, #0]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop

08006b78 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	; 0x30
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fc2f 	bl	80063f4 <validate>
 8006b96:	4603      	mov	r3, r0
 8006b98:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006b9a:	7ffb      	ldrb	r3, [r7, #31]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <f_read+0x2c>
 8006ba0:	7ffb      	ldrb	r3, [r7, #31]
 8006ba2:	e1fb      	b.n	8006f9c <f_read+0x424>
	if (fp->err)								/* Check error */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006baa:	3307      	adds	r3, #7
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d005      	beq.n	8006bbe <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb8:	3307      	adds	r3, #7
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	e1ee      	b.n	8006f9c <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc4:	3306      	adds	r3, #6
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006bd0:	2307      	movs	r3, #7
 8006bd2:	e1e3      	b.n	8006f9c <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bda:	330c      	adds	r3, #12
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be4:	3308      	adds	r3, #8
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	f240 81ce 	bls.w	8006f92 <f_read+0x41a>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006bfa:	e1ca      	b.n	8006f92 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c02:	3308      	adds	r3, #8
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c12:	330a      	adds	r3, #10
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c1a:	fb03 f301 	mul.w	r3, r3, r1
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f040 8160 	bne.w	8006ee6 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c3c:	330a      	adds	r3, #10
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c52:	3302      	adds	r3, #2
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d14a      	bne.n	8006cfa <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c78:	3310      	adds	r3, #16
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c7e:	e01f      	b.n	8006cc0 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006c86:	3304      	adds	r3, #4
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c94:	3308      	adds	r3, #8
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7fd fea6 	bl	80049ec <clmt_clust>
 8006ca0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006ca2:	e00d      	b.n	8006cc0 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb2:	3314      	adds	r3, #20
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f7fd fb1f 	bl	80042fc <get_fat>
 8006cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d807      	bhi.n	8006cd6 <f_read+0x15e>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ccc:	3307      	adds	r3, #7
 8006cce:	2202      	movs	r2, #2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e162      	b.n	8006f9c <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d107      	bne.n	8006cee <f_read+0x176>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce4:	3307      	adds	r3, #7
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	2301      	movs	r3, #1
 8006cec:	e156      	b.n	8006f9c <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf8:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d08:	3314      	adds	r3, #20
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f7fd facd 	bl	80042ae <clust2sect>
 8006d14:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d107      	bne.n	8006d2c <f_read+0x1b4>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d22:	3307      	adds	r3, #7
 8006d24:	2202      	movs	r2, #2
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e137      	b.n	8006f9c <f_read+0x424>
			sect += csect;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4413      	add	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d40:	330a      	adds	r3, #10
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d070      	beq.n	8006e36 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006d54:	7dfa      	ldrb	r2, [r7, #23]
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	441a      	add	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d66:	3302      	adds	r3, #2
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d90b      	bls.n	8006d86 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d7a:	3302      	adds	r3, #2
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d92:	3301      	adds	r3, #1
 8006d94:	7818      	ldrb	r0, [r3, #0]
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	6a39      	ldr	r1, [r7, #32]
 8006d9c:	f7fc fe94 	bl	8003ac8 <disk_read>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dac:	3307      	adds	r3, #7
 8006dae:	2201      	movs	r2, #1
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	2301      	movs	r3, #1
 8006db4:	e0f2      	b.n	8006f9c <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dbc:	3306      	adds	r3, #6
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d028      	beq.n	8006e1a <f_read+0x2a2>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dce:	3318      	adds	r3, #24
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d91e      	bls.n	8006e1a <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de2:	3318      	adds	r3, #24
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df6:	330a      	adds	r3, #10
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	fb03 f302 	mul.w	r3, r3, r2
 8006dfe:	6a3a      	ldr	r2, [r7, #32]
 8006e00:	18d0      	adds	r0, r2, r3
 8006e02:	68f9      	ldr	r1, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e10:	330a      	adds	r3, #10
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	f7fc feb5 	bl	8003b84 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e26:	330a      	adds	r3, #10
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006e34:	e093      	b.n	8006f5e <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e3c:	3318      	adds	r3, #24
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d049      	beq.n	8006eda <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e4c:	3306      	adds	r3, #6
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d028      	beq.n	8006eaa <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e64:	3301      	adds	r3, #1
 8006e66:	7818      	ldrb	r0, [r3, #0]
 8006e68:	68f9      	ldr	r1, [r7, #12]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e70:	3318      	adds	r3, #24
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	2301      	movs	r3, #1
 8006e76:	f7fc fe47 	bl	8003b08 <disk_write>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e86:	3307      	adds	r3, #7
 8006e88:	2201      	movs	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e085      	b.n	8006f9c <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e96:	3306      	adds	r3, #6
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea6:	3306      	adds	r3, #6
 8006ea8:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	7818      	ldrb	r0, [r3, #0]
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	f7fc fe02 	bl	8003ac8 <disk_read>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed0:	3307      	adds	r3, #7
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e060      	b.n	8006f9c <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee0:	3318      	adds	r3, #24
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef2:	330a      	adds	r3, #10
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006efe:	3308      	adds	r3, #8
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0e:	330a      	adds	r3, #10
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f16:	fb03 f301 	mul.w	r3, r3, r1
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	1ac3      	subs	r3, r0, r3
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d901      	bls.n	8006f2c <f_read+0x3b4>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f32:	3308      	adds	r3, #8
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f42:	330a      	adds	r3, #10
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f4a:	fb03 f301 	mul.w	r3, r3, r1
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f56:	4619      	mov	r1, r3
 8006f58:	6a38      	ldr	r0, [r7, #32]
 8006f5a:	f7fc fe13 	bl	8003b84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006f5e:	6a3a      	ldr	r2, [r7, #32]
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	4413      	add	r3, r2
 8006f64:	623b      	str	r3, [r7, #32]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	441a      	add	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	441a      	add	r2, r3
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f47f ae31 	bne.w	8006bfc <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3730      	adds	r7, #48	; 0x30
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fa21 	bl	80063f4 <validate>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f040 80cc 	bne.w	8007156 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc4:	3306      	adds	r3, #6
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80c2 	beq.w	8007156 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd8:	3306      	adds	r3, #6
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d022      	beq.n	800702a <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	7818      	ldrb	r0, [r3, #0]
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffc:	3318      	adds	r3, #24
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	2301      	movs	r3, #1
 8007002:	f7fc fd81 	bl	8003b08 <disk_write>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800700c:	2301      	movs	r3, #1
 800700e:	e0a3      	b.n	8007158 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007016:	3306      	adds	r3, #6
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701e:	b2da      	uxtb	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007026:	3306      	adds	r3, #6
 8007028:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007038:	331c      	adds	r3, #28
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f7fd f832 	bl	80040a8 <move_window>
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f040 8083 	bne.w	8007156 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	330b      	adds	r3, #11
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	330b      	adds	r3, #11
 8007064:	f042 0220 	orr.w	r2, r2, #32
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007072:	330c      	adds	r3, #12
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	331c      	adds	r3, #28
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007084:	330c      	adds	r3, #12
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	0a1b      	lsrs	r3, r3, #8
 800708c:	b29a      	uxth	r2, r3
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	331d      	adds	r3, #29
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709c:	330c      	adds	r3, #12
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	0c1a      	lsrs	r2, r3, #16
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	331e      	adds	r3, #30
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b0:	330c      	adds	r3, #12
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	0e1a      	lsrs	r2, r3, #24
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	331f      	adds	r3, #31
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c4:	3310      	adds	r3, #16
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4619      	mov	r1, r3
 80070ca:	6938      	ldr	r0, [r7, #16]
 80070cc:	f7fd ff8d 	bl	8004fea <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80070d0:	f7fc fc58 	bl	8003984 <get_fattime>
 80070d4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	3316      	adds	r3, #22
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3317      	adds	r3, #23
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	0c1a      	lsrs	r2, r3, #16
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	3318      	adds	r3, #24
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	0e1a      	lsrs	r2, r3, #24
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	3319      	adds	r3, #25
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	3312      	adds	r3, #18
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	3313      	adds	r3, #19
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711e:	3306      	adds	r3, #6
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	f023 0320 	bic.w	r3, r3, #32
 8007126:	b2da      	uxtb	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712e:	3306      	adds	r3, #6
 8007130:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800713e:	3304      	adds	r3, #4
 8007140:	2201      	movs	r2, #1
 8007142:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4618      	mov	r0, r3
 800714e:	f7fc ffdf 	bl	8004110 <sync_fs>
 8007152:	4603      	mov	r3, r0
 8007154:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007156:	7dfb      	ldrb	r3, [r7, #23]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff ff1b 	bl	8006fa4 <f_sync>
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d119      	bne.n	80071ac <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff f93b 	bl	80063f4 <validate>
 800717e:	4603      	mov	r3, r0
 8007180:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d111      	bne.n	80071ac <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800718e:	3308      	adds	r3, #8
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f7fc fec2 	bl	8003f1c <dec_lock>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b08e      	sub	sp, #56	; 0x38
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80071c2:	f107 030c 	add.w	r3, r7, #12
 80071c6:	2200      	movs	r2, #0
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fe fdb6 	bl	8005d3c <find_volume>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80071dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f040 80c4 	bne.w	800736e <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ec:	3310      	adds	r3, #16
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f6:	3314      	adds	r3, #20
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3b02      	subs	r3, #2
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d807      	bhi.n	8007210 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007206:	3310      	adds	r3, #16
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e0ae      	b.n	800736e <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800721e:	7efb      	ldrb	r3, [r7, #27]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d127      	bne.n	8007274 <f_getfree+0xbe>
				clst = 2;
 8007224:	2302      	movs	r3, #2
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8007228:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800722a:	69f8      	ldr	r0, [r7, #28]
 800722c:	f7fd f866 	bl	80042fc <get_fat>
 8007230:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007238:	d103      	bne.n	8007242 <f_getfree+0x8c>
 800723a:	2301      	movs	r3, #1
 800723c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007240:	e07f      	b.n	8007342 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d103      	bne.n	8007250 <f_getfree+0x9a>
 8007248:	2302      	movs	r3, #2
 800724a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800724e:	e078      	b.n	8007342 <f_getfree+0x18c>
					if (stat == 0) n++;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <f_getfree+0xa6>
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	3301      	adds	r3, #1
 800725a:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	3301      	adds	r3, #1
 8007260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007268:	3314      	adds	r3, #20
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726e:	429a      	cmp	r2, r3
 8007270:	d3da      	bcc.n	8007228 <f_getfree+0x72>
 8007272:	e066      	b.n	8007342 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727a:	3314      	adds	r3, #20
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
 800728e:	2300      	movs	r3, #0
 8007290:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d115      	bne.n	80072c4 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	62ba      	str	r2, [r7, #40]	; 0x28
 800729e:	4619      	mov	r1, r3
 80072a0:	69f8      	ldr	r0, [r7, #28]
 80072a2:	f7fc ff01 	bl	80040a8 <move_window>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 80072ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d145      	bne.n	8007340 <f_getfree+0x18a>
						p = fs->win.d8;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072be:	330a      	adds	r3, #10
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80072c4:	7efb      	ldrb	r3, [r7, #27]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d115      	bne.n	80072f6 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	3301      	adds	r3, #1
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	b21a      	sxth	r2, r3
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	b21b      	sxth	r3, r3
 80072da:	4313      	orrs	r3, r2
 80072dc:	b21b      	sxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <f_getfree+0x132>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	3301      	adds	r3, #1
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	3302      	adds	r3, #2
 80072ec:	623b      	str	r3, [r7, #32]
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	3b02      	subs	r3, #2
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
 80072f4:	e01d      	b.n	8007332 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	3303      	adds	r3, #3
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	061a      	lsls	r2, r3, #24
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	3302      	adds	r3, #2
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	041b      	lsls	r3, r3, #16
 8007306:	4313      	orrs	r3, r2
 8007308:	6a3a      	ldr	r2, [r7, #32]
 800730a:	3201      	adds	r2, #1
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	0212      	lsls	r2, r2, #8
 8007310:	4313      	orrs	r3, r2
 8007312:	6a3a      	ldr	r2, [r7, #32]
 8007314:	7812      	ldrb	r2, [r2, #0]
 8007316:	4313      	orrs	r3, r2
 8007318:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <f_getfree+0x170>
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	3301      	adds	r3, #1
 8007324:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	3304      	adds	r3, #4
 800732a:	623b      	str	r3, [r7, #32]
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	3b04      	subs	r3, #4
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	3b01      	subs	r3, #1
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1a9      	bne.n	8007292 <f_getfree+0xdc>
 800733e:	e000      	b.n	8007342 <f_getfree+0x18c>
						if (res != FR_OK) break;
 8007340:	bf00      	nop
			}
			fs->free_clust = n;
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007348:	3310      	adds	r3, #16
 800734a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734c:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007354:	3305      	adds	r3, #5
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f043 0301 	orr.w	r3, r3, #1
 800735c:	b2da      	uxtb	r2, r3
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007364:	3305      	adds	r3, #5
 8007366:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800736c:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800736e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007372:	4618      	mov	r0, r3
 8007374:	3738      	adds	r7, #56	; 0x38
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800738a:	2301      	movs	r3, #1
 800738c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007392:	4b1e      	ldr	r3, [pc, #120]	; (800740c <FATFS_LinkDriverEx+0x90>)
 8007394:	7a5b      	ldrb	r3, [r3, #9]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b01      	cmp	r3, #1
 800739a:	d831      	bhi.n	8007400 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800739c:	4b1b      	ldr	r3, [pc, #108]	; (800740c <FATFS_LinkDriverEx+0x90>)
 800739e:	7a5b      	ldrb	r3, [r3, #9]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	461a      	mov	r2, r3
 80073a4:	4b19      	ldr	r3, [pc, #100]	; (800740c <FATFS_LinkDriverEx+0x90>)
 80073a6:	2100      	movs	r1, #0
 80073a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80073aa:	4b18      	ldr	r3, [pc, #96]	; (800740c <FATFS_LinkDriverEx+0x90>)
 80073ac:	7a5b      	ldrb	r3, [r3, #9]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	4a16      	ldr	r2, [pc, #88]	; (800740c <FATFS_LinkDriverEx+0x90>)
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80073ba:	4b14      	ldr	r3, [pc, #80]	; (800740c <FATFS_LinkDriverEx+0x90>)
 80073bc:	7a5b      	ldrb	r3, [r3, #9]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	4b12      	ldr	r3, [pc, #72]	; (800740c <FATFS_LinkDriverEx+0x90>)
 80073c4:	4413      	add	r3, r2
 80073c6:	79fa      	ldrb	r2, [r7, #7]
 80073c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80073ca:	4b10      	ldr	r3, [pc, #64]	; (800740c <FATFS_LinkDriverEx+0x90>)
 80073cc:	7a5b      	ldrb	r3, [r3, #9]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	b2d1      	uxtb	r1, r2
 80073d4:	4a0d      	ldr	r2, [pc, #52]	; (800740c <FATFS_LinkDriverEx+0x90>)
 80073d6:	7251      	strb	r1, [r2, #9]
 80073d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80073da:	7dbb      	ldrb	r3, [r7, #22]
 80073dc:	3330      	adds	r3, #48	; 0x30
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	3301      	adds	r3, #1
 80073e8:	223a      	movs	r2, #58	; 0x3a
 80073ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	3302      	adds	r3, #2
 80073f0:	222f      	movs	r2, #47	; 0x2f
 80073f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	3303      	adds	r3, #3
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
}
 8007402:	4618      	mov	r0, r3
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr
 800740c:	20000268 	.word	0x20000268

08007410 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800741a:	2200      	movs	r2, #0
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff ffac 	bl	800737c <FATFS_LinkDriverEx>
 8007424:	4603      	mov	r3, r0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800743c:	88fb      	ldrh	r3, [r7, #6]
 800743e:	2b7f      	cmp	r3, #127	; 0x7f
 8007440:	d802      	bhi.n	8007448 <ff_convert+0x18>
		c = chr;
 8007442:	88fb      	ldrh	r3, [r7, #6]
 8007444:	81fb      	strh	r3, [r7, #14]
 8007446:	e025      	b.n	8007494 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	2bff      	cmp	r3, #255	; 0xff
 8007452:	d805      	bhi.n	8007460 <ff_convert+0x30>
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	3b80      	subs	r3, #128	; 0x80
 8007458:	4a11      	ldr	r2, [pc, #68]	; (80074a0 <ff_convert+0x70>)
 800745a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800745e:	e000      	b.n	8007462 <ff_convert+0x32>
 8007460:	2300      	movs	r3, #0
 8007462:	81fb      	strh	r3, [r7, #14]
 8007464:	e016      	b.n	8007494 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007466:	2300      	movs	r3, #0
 8007468:	81fb      	strh	r3, [r7, #14]
 800746a:	e009      	b.n	8007480 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800746c:	89fb      	ldrh	r3, [r7, #14]
 800746e:	4a0c      	ldr	r2, [pc, #48]	; (80074a0 <ff_convert+0x70>)
 8007470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007474:	88fa      	ldrh	r2, [r7, #6]
 8007476:	429a      	cmp	r2, r3
 8007478:	d006      	beq.n	8007488 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800747a:	89fb      	ldrh	r3, [r7, #14]
 800747c:	3301      	adds	r3, #1
 800747e:	81fb      	strh	r3, [r7, #14]
 8007480:	89fb      	ldrh	r3, [r7, #14]
 8007482:	2b7f      	cmp	r3, #127	; 0x7f
 8007484:	d9f2      	bls.n	800746c <ff_convert+0x3c>
 8007486:	e000      	b.n	800748a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007488:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800748a:	89fb      	ldrh	r3, [r7, #14]
 800748c:	3380      	adds	r3, #128	; 0x80
 800748e:	b29b      	uxth	r3, r3
 8007490:	b2db      	uxtb	r3, r3
 8007492:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007494:	89fb      	ldrh	r3, [r7, #14]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr
 80074a0:	08007680 	.word	0x08007680

080074a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e002      	b.n	80074ba <ff_wtoupper+0x16>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3301      	adds	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	4a0f      	ldr	r2, [pc, #60]	; (80074f8 <ff_wtoupper+0x54>)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d006      	beq.n	80074d4 <ff_wtoupper+0x30>
 80074c6:	4a0c      	ldr	r2, [pc, #48]	; (80074f8 <ff_wtoupper+0x54>)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ce:	88fa      	ldrh	r2, [r7, #6]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d1ef      	bne.n	80074b4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80074d4:	4a08      	ldr	r2, [pc, #32]	; (80074f8 <ff_wtoupper+0x54>)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <ff_wtoupper+0x46>
 80074e0:	4a06      	ldr	r2, [pc, #24]	; (80074fc <ff_wtoupper+0x58>)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e8:	e000      	b.n	80074ec <ff_wtoupper+0x48>
 80074ea:	88fb      	ldrh	r3, [r7, #6]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	08007780 	.word	0x08007780
 80074fc:	08007960 	.word	0x08007960

08007500 <__libc_init_array>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	2500      	movs	r5, #0
 8007504:	4e0c      	ldr	r6, [pc, #48]	; (8007538 <__libc_init_array+0x38>)
 8007506:	4c0d      	ldr	r4, [pc, #52]	; (800753c <__libc_init_array+0x3c>)
 8007508:	1ba4      	subs	r4, r4, r6
 800750a:	10a4      	asrs	r4, r4, #2
 800750c:	42a5      	cmp	r5, r4
 800750e:	d109      	bne.n	8007524 <__libc_init_array+0x24>
 8007510:	f000 f822 	bl	8007558 <_init>
 8007514:	2500      	movs	r5, #0
 8007516:	4e0a      	ldr	r6, [pc, #40]	; (8007540 <__libc_init_array+0x40>)
 8007518:	4c0a      	ldr	r4, [pc, #40]	; (8007544 <__libc_init_array+0x44>)
 800751a:	1ba4      	subs	r4, r4, r6
 800751c:	10a4      	asrs	r4, r4, #2
 800751e:	42a5      	cmp	r5, r4
 8007520:	d105      	bne.n	800752e <__libc_init_array+0x2e>
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007528:	4798      	blx	r3
 800752a:	3501      	adds	r5, #1
 800752c:	e7ee      	b.n	800750c <__libc_init_array+0xc>
 800752e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007532:	4798      	blx	r3
 8007534:	3501      	adds	r5, #1
 8007536:	e7f2      	b.n	800751e <__libc_init_array+0x1e>
 8007538:	08007b40 	.word	0x08007b40
 800753c:	08007b40 	.word	0x08007b40
 8007540:	08007b40 	.word	0x08007b40
 8007544:	08007b44 	.word	0x08007b44

08007548 <memset>:
 8007548:	4603      	mov	r3, r0
 800754a:	4402      	add	r2, r0
 800754c:	4293      	cmp	r3, r2
 800754e:	d100      	bne.n	8007552 <memset+0xa>
 8007550:	4770      	bx	lr
 8007552:	f803 1b01 	strb.w	r1, [r3], #1
 8007556:	e7f9      	b.n	800754c <memset+0x4>

08007558 <_init>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr

08007564 <_fini>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	bf00      	nop
 8007568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756a:	bc08      	pop	{r3}
 800756c:	469e      	mov	lr, r3
 800756e:	4770      	bx	lr
